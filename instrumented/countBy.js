function cov_8nyhd20xp(){var path="D:\\Msc in DS-Course Materials\\Software Testing\\COMP.SE.200-Part 2\\src\\countBy.js";var hash="b80212d999e6f34e211e353179d0a6ca9fa80dc1";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"D:\\Msc in DS-Course Materials\\Software Testing\\COMP.SE.200-Part 2\\src\\countBy.js",statementMap:{"0":{start:{line:5,column:23},end:{line:5,column:54}},"1":{start:{line:30,column:2},end:{line:38,column:8}},"2":{start:{line:31,column:4},end:{line:31,column:25}},"3":{start:{line:32,column:4},end:{line:36,column:5}},"4":{start:{line:33,column:6},end:{line:33,column:19}},"5":{start:{line:35,column:6},end:{line:35,column:37}},"6":{start:{line:37,column:4},end:{line:37,column:17}}},fnMap:{"0":{name:"countBy",decl:{start:{line:29,column:9},end:{line:29,column:16}},loc:{start:{line:29,column:39},end:{line:39,column:1}},line:29},"1":{name:"(anonymous_1)",decl:{start:{line:30,column:28},end:{line:30,column:29}},loc:{start:{line:30,column:52},end:{line:38,column:3}},line:30}},branchMap:{"0":{loc:{start:{line:32,column:4},end:{line:36,column:5}},type:"if",locations:[{start:{line:32,column:4},end:{line:36,column:5}},{start:{line:32,column:4},end:{line:36,column:5}}],line:32}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},f:{"0":0,"1":0},b:{"0":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"b80212d999e6f34e211e353179d0a6ca9fa80dc1"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_8nyhd20xp=function(){return actualCoverage;};}return actualCoverage;}cov_8nyhd20xp();import baseAssignValue from'./.internal/baseAssignValue.js';import reduce from'./reduce.js';/** Used to check objects for own properties. */const hasOwnProperty=(cov_8nyhd20xp().s[0]++,Object.prototype.hasOwnProperty);/**
 * Creates an object composed of keys generated from the results of running
 * each element of `collection` thru `iteratee`. The corresponding value of
 * each key is the number of times the key was returned by `iteratee`. The
 * iteratee is invoked with one argument: (value).
 *
 * @since 0.5.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The iteratee to transform keys.
 * @returns {Object} Returns the composed aggregate object.
 * @example
 *
 * const users = [
 *   { 'user': 'barney', 'active': true },
 *   { 'user': 'betty', 'active': true },
 *   { 'user': 'fred', 'active': false }
 * ]
 *
 * countBy(users, value => value.active);
 * // => { 'true': 2, 'false': 1 }
 */function countBy(collection,iteratee){cov_8nyhd20xp().f[0]++;cov_8nyhd20xp().s[1]++;return reduce(collection,(result,value,key)=>{cov_8nyhd20xp().f[1]++;cov_8nyhd20xp().s[2]++;key=iteratee(value);cov_8nyhd20xp().s[3]++;if(hasOwnProperty.call(result,key)){cov_8nyhd20xp().b[0][0]++;cov_8nyhd20xp().s[4]++;++result[key];}else{cov_8nyhd20xp().b[0][1]++;cov_8nyhd20xp().s[5]++;baseAssignValue(result,key,0);}cov_8nyhd20xp().s[6]++;return result;},{});}export default countBy;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfOG55aGQyMHhwIiwiYWN0dWFsQ292ZXJhZ2UiLCJiYXNlQXNzaWduVmFsdWUiLCJyZWR1Y2UiLCJoYXNPd25Qcm9wZXJ0eSIsInMiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJjb3VudEJ5IiwiY29sbGVjdGlvbiIsIml0ZXJhdGVlIiwiZiIsInJlc3VsdCIsInZhbHVlIiwia2V5IiwiY2FsbCIsImIiXSwic291cmNlcyI6WyJjb3VudEJ5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBiYXNlQXNzaWduVmFsdWUgZnJvbSAnLi8uaW50ZXJuYWwvYmFzZUFzc2lnblZhbHVlLmpzJ1xuaW1wb3J0IHJlZHVjZSBmcm9tICcuL3JlZHVjZS5qcydcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG5jb25zdCBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHlcblxuLyoqXG4gKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiBrZXlzIGdlbmVyYXRlZCBmcm9tIHRoZSByZXN1bHRzIG9mIHJ1bm5pbmdcbiAqIGVhY2ggZWxlbWVudCBvZiBgY29sbGVjdGlvbmAgdGhydSBgaXRlcmF0ZWVgLiBUaGUgY29ycmVzcG9uZGluZyB2YWx1ZSBvZlxuICogZWFjaCBrZXkgaXMgdGhlIG51bWJlciBvZiB0aW1lcyB0aGUga2V5IHdhcyByZXR1cm5lZCBieSBgaXRlcmF0ZWVgLiBUaGVcbiAqIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gKlxuICogQHNpbmNlIDAuNS4wXG4gKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSBrZXlzLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY29tcG9zZWQgYWdncmVnYXRlIG9iamVjdC5cbiAqIEBleGFtcGxlXG4gKlxuICogY29uc3QgdXNlcnMgPSBbXG4gKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IHRydWUgfSxcbiAqICAgeyAndXNlcic6ICdiZXR0eScsICdhY3RpdmUnOiB0cnVlIH0sXG4gKiAgIHsgJ3VzZXInOiAnZnJlZCcsICdhY3RpdmUnOiBmYWxzZSB9XG4gKiBdXG4gKlxuICogY291bnRCeSh1c2VycywgdmFsdWUgPT4gdmFsdWUuYWN0aXZlKTtcbiAqIC8vID0+IHsgJ3RydWUnOiAyLCAnZmFsc2UnOiAxIH1cbiAqL1xuZnVuY3Rpb24gY291bnRCeShjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICByZXR1cm4gcmVkdWNlKGNvbGxlY3Rpb24sIChyZXN1bHQsIHZhbHVlLCBrZXkpID0+IHtcbiAgICBrZXkgPSBpdGVyYXRlZSh2YWx1ZSlcbiAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChyZXN1bHQsIGtleSkpIHtcbiAgICAgICsrcmVzdWx0W2tleV1cbiAgICB9IGVsc2Uge1xuICAgICAgYmFzZUFzc2lnblZhbHVlKHJlc3VsdCwga2V5LCAwKVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0XG4gIH0sIHt9KVxufVxuXG5leHBvcnQgZGVmYXVsdCBjb3VudEJ5XG4iXSwibWFwcGluZ3MiOiI4aURBZVk7QUFBQUEsYUFBQSxTQUFBQSxDQUFBLFNBQUFDLGNBQUEsV0FBQUEsY0FBQSxFQUFBRCxhQUFBLEdBZlosTUFBTyxDQUFBRSxlQUFlLEtBQU0sZ0NBQWdDLENBQzVELE1BQU8sQ0FBQUMsTUFBTSxLQUFNLGFBQWEsQ0FFaEMsZ0RBQ0EsS0FBTSxDQUFBQyxjQUFjLEVBQUFKLGFBQUEsR0FBQUssQ0FBQSxNQUFHQyxNQUFNLENBQUNDLFNBQVMsQ0FBQ0gsY0FBYyxFQUV0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUNBLFFBQVMsQ0FBQUksT0FBT0EsQ0FBQ0MsVUFBVSxDQUFFQyxRQUFRLENBQUUsQ0FBQVYsYUFBQSxHQUFBVyxDQUFBLE1BQUFYLGFBQUEsR0FBQUssQ0FBQSxNQUNyQyxNQUFPLENBQUFGLE1BQU0sQ0FBQ00sVUFBVSxDQUFFLENBQUNHLE1BQU0sQ0FBRUMsS0FBSyxDQUFFQyxHQUFHLEdBQUssQ0FBQWQsYUFBQSxHQUFBVyxDQUFBLE1BQUFYLGFBQUEsR0FBQUssQ0FBQSxNQUNoRFMsR0FBRyxDQUFHSixRQUFRLENBQUNHLEtBQUssQ0FBQyxDQUFBYixhQUFBLEdBQUFLLENBQUEsTUFDckIsR0FBSUQsY0FBYyxDQUFDVyxJQUFJLENBQUNILE1BQU0sQ0FBRUUsR0FBRyxDQUFDLENBQUUsQ0FBQWQsYUFBQSxHQUFBZ0IsQ0FBQSxTQUFBaEIsYUFBQSxHQUFBSyxDQUFBLE1BQ3BDLEVBQUVPLE1BQU0sQ0FBQ0UsR0FBRyxDQUFDLENBQ2YsQ0FBQyxJQUFNLENBQUFkLGFBQUEsR0FBQWdCLENBQUEsU0FBQWhCLGFBQUEsR0FBQUssQ0FBQSxNQUNMSCxlQUFlLENBQUNVLE1BQU0sQ0FBRUUsR0FBRyxDQUFFLENBQUMsQ0FBQyxDQUNqQyxDQUFDZCxhQUFBLEdBQUFLLENBQUEsTUFDRCxNQUFPLENBQUFPLE1BQU0sQ0FDZixDQUFDLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FDUixDQUVBLGNBQWUsQ0FBQUosT0FBTyIsImlnbm9yZUxpc3QiOltdfQ==