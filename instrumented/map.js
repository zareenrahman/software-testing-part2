function cov_12omaklxox(){var path="D:\\Msc in DS-Course Materials\\Software Testing\\COMP.SE.200-Part 2\\src\\map.js";var hash="ec67b0ab5d31d5ed27657538f3c206d979e7b812";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"D:\\Msc in DS-Course Materials\\Software Testing\\COMP.SE.200-Part 2\\src\\map.js",statementMap:{"0":{start:{line:20,column:14},end:{line:20,column:16}},"1":{start:{line:21,column:17},end:{line:21,column:49}},"2":{start:{line:22,column:17},end:{line:22,column:34}},"3":{start:{line:24,column:2},end:{line:26,column:3}},"4":{start:{line:25,column:4},end:{line:25,column:56}},"5":{start:{line:27,column:2},end:{line:27,column:15}}},fnMap:{"0":{name:"map",decl:{start:{line:19,column:9},end:{line:19,column:12}},loc:{start:{line:19,column:30},end:{line:28,column:1}},line:19}},branchMap:{"0":{loc:{start:{line:21,column:17},end:{line:21,column:49}},type:"cond-expr",locations:[{start:{line:21,column:33},end:{line:21,column:34}},{start:{line:21,column:37},end:{line:21,column:49}}],line:21}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0},f:{"0":0},b:{"0":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"ec67b0ab5d31d5ed27657538f3c206d979e7b812"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_12omaklxox=function(){return actualCoverage;};}return actualCoverage;}cov_12omaklxox();/**
 * Creates an array of values by running each element of `array` thru `iteratee`.
 * The iteratee is invoked with three arguments: (value, index, array).
 *
 * @since 5.0.0
 * @category Array
 * @param {Array} array The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 * @example
 *
 * function square(n) {
 *   return n * n
 * }
 *
 * map([4, 8], square)
 * // => [16, 64]
 */function map(array,iteratee){cov_12omaklxox().f[0]++;let index=(cov_12omaklxox().s[0]++,-1);const length=(cov_12omaklxox().s[1]++,array==null?(cov_12omaklxox().b[0][0]++,0):(cov_12omaklxox().b[0][1]++,array.length));const result=(cov_12omaklxox().s[2]++,new Array(length));cov_12omaklxox().s[3]++;while(++index<length){cov_12omaklxox().s[4]++;result[index]=iteratee(array[index],index,array);}cov_12omaklxox().s[5]++;return result;}export default map;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMTJvbWFrbHhveCIsImFjdHVhbENvdmVyYWdlIiwibWFwIiwiYXJyYXkiLCJpdGVyYXRlZSIsImYiLCJpbmRleCIsInMiLCJsZW5ndGgiLCJiIiwicmVzdWx0IiwiQXJyYXkiXSwic291cmNlcyI6WyJtYXAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHZhbHVlcyBieSBydW5uaW5nIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgIHRocnUgYGl0ZXJhdGVlYC5cbiAqIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4LCBhcnJheSkuXG4gKlxuICogQHNpbmNlIDUuMC4wXG4gKiBAY2F0ZWdvcnkgQXJyYXlcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICogICByZXR1cm4gbiAqIG5cbiAqIH1cbiAqXG4gKiBtYXAoWzQsIDhdLCBzcXVhcmUpXG4gKiAvLyA9PiBbMTYsIDY0XVxuICovXG5mdW5jdGlvbiBtYXAoYXJyYXksIGl0ZXJhdGVlKSB7XG4gIGxldCBpbmRleCA9IC0xXG4gIGNvbnN0IGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoXG4gIGNvbnN0IHJlc3VsdCA9IG5ldyBBcnJheShsZW5ndGgpXG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpXG4gIH1cbiAgcmV0dXJuIHJlc3VsdFxufVxuXG5leHBvcnQgZGVmYXVsdCBtYXBcbiJdLCJtYXBwaW5ncyI6IisxQ0FlWTtBQUFBQSxjQUFBLFNBQUFBLENBQUEsU0FBQUMsY0FBQSxXQUFBQSxjQUFBLEVBQUFELGNBQUEsR0FmWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FDQSxRQUFTLENBQUFFLEdBQUdBLENBQUNDLEtBQUssQ0FBRUMsUUFBUSxDQUFFLENBQUFKLGNBQUEsR0FBQUssQ0FBQSxNQUM1QixHQUFJLENBQUFDLEtBQUssRUFBQU4sY0FBQSxHQUFBTyxDQUFBLE1BQUcsQ0FBQyxDQUFDLEVBQ2QsS0FBTSxDQUFBQyxNQUFNLEVBQUFSLGNBQUEsR0FBQU8sQ0FBQSxNQUFHSixLQUFLLEVBQUksSUFBSSxFQUFBSCxjQUFBLEdBQUFTLENBQUEsU0FBRyxDQUFDLEdBQUFULGNBQUEsR0FBQVMsQ0FBQSxTQUFHTixLQUFLLENBQUNLLE1BQU0sR0FDL0MsS0FBTSxDQUFBRSxNQUFNLEVBQUFWLGNBQUEsR0FBQU8sQ0FBQSxNQUFHLEdBQUksQ0FBQUksS0FBSyxDQUFDSCxNQUFNLENBQUMsRUFBQVIsY0FBQSxHQUFBTyxDQUFBLE1BRWhDLE1BQU8sRUFBRUQsS0FBSyxDQUFHRSxNQUFNLENBQUUsQ0FBQVIsY0FBQSxHQUFBTyxDQUFBLE1BQ3ZCRyxNQUFNLENBQUNKLEtBQUssQ0FBQyxDQUFHRixRQUFRLENBQUNELEtBQUssQ0FBQ0csS0FBSyxDQUFDLENBQUVBLEtBQUssQ0FBRUgsS0FBSyxDQUFDLENBQ3RELENBQUNILGNBQUEsR0FBQU8sQ0FBQSxNQUNELE1BQU8sQ0FBQUcsTUFBTSxDQUNmLENBRUEsY0FBZSxDQUFBUixHQUFHIiwiaWdub3JlTGlzdCI6W119