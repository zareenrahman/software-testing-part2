function cov_1gl8d3aint(){var path="D:\\Msc in DS-Course Materials\\Software Testing\\COMP.SE.200-Part 2\\src\\filter.js";var hash="643f35d85db54327242546b05115a25285b60c64";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"D:\\Msc in DS-Course Materials\\Software Testing\\COMP.SE.200-Part 2\\src\\filter.js",statementMap:{"0":{start:{line:25,column:14},end:{line:25,column:16}},"1":{start:{line:26,column:17},end:{line:26,column:18}},"2":{start:{line:27,column:17},end:{line:27,column:49}},"3":{start:{line:28,column:17},end:{line:28,column:19}},"4":{start:{line:30,column:2},end:{line:35,column:3}},"5":{start:{line:31,column:18},end:{line:31,column:30}},"6":{start:{line:32,column:4},end:{line:34,column:5}},"7":{start:{line:33,column:6},end:{line:33,column:32}},"8":{start:{line:36,column:2},end:{line:36,column:15}},"9":{start:{line:40,column:0},end:{line:40,column:53}}},fnMap:{"0":{name:"filter",decl:{start:{line:24,column:9},end:{line:24,column:15}},loc:{start:{line:24,column:34},end:{line:37,column:1}},line:24}},branchMap:{"0":{loc:{start:{line:27,column:17},end:{line:27,column:49}},type:"cond-expr",locations:[{start:{line:27,column:33},end:{line:27,column:34}},{start:{line:27,column:37},end:{line:27,column:49}}],line:27},"1":{loc:{start:{line:32,column:4},end:{line:34,column:5}},type:"if",locations:[{start:{line:32,column:4},end:{line:34,column:5}},{start:{line:32,column:4},end:{line:34,column:5}}],line:32}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},f:{"0":0},b:{"0":[0,0],"1":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"643f35d85db54327242546b05115a25285b60c64"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1gl8d3aint=function(){return actualCoverage;};}return actualCoverage;}cov_1gl8d3aint();/**
 * Iterates over elements of `array`, returning an array of all elements
 * `predicate` returns truthy for. The predicate is invoked with three
 * arguments: (value, index, array).
 *
 * **Note:** Unlike `remove`, this method returns a new array.
 *
 * @since 5.0.0
 * @category Array
 * @param {Array} array The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 * @see pull, pullAll, pullAllBy, pullAllWith, pullAt, remove, reject
 * @example
 *
 * const users = [
 *   { 'user': 'barney', 'active': true },
 *   { 'user': 'fred',   'active': false }
 * ]
 *
 * filter(users, ({ active }) => active)
 * // => objects for ['barney']
 */function filter(array,predicate){cov_1gl8d3aint().f[0]++;let index=(cov_1gl8d3aint().s[0]++,-1);let resIndex=(cov_1gl8d3aint().s[1]++,0);const length=(cov_1gl8d3aint().s[2]++,array==null?(cov_1gl8d3aint().b[0][0]++,0):(cov_1gl8d3aint().b[0][1]++,array.length));const result=(cov_1gl8d3aint().s[3]++,[]);cov_1gl8d3aint().s[4]++;while(++index<length){const value=(cov_1gl8d3aint().s[5]++,array[index]);cov_1gl8d3aint().s[6]++;if(predicate(value,index,array)){cov_1gl8d3aint().b[1][0]++;cov_1gl8d3aint().s[7]++;result[resIndex++]=value;}else{cov_1gl8d3aint().b[1][1]++;}}cov_1gl8d3aint().s[8]++;return result;}export default filter;cov_1gl8d3aint().s[9]++;console.log("filter.js is executed during the test");
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMWdsOGQzYWludCIsImFjdHVhbENvdmVyYWdlIiwiZmlsdGVyIiwiYXJyYXkiLCJwcmVkaWNhdGUiLCJmIiwiaW5kZXgiLCJzIiwicmVzSW5kZXgiLCJsZW5ndGgiLCJiIiwicmVzdWx0IiwidmFsdWUiLCJjb25zb2xlIiwibG9nIl0sInNvdXJjZXMiOlsiZmlsdGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogSXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZiBgYXJyYXlgLCByZXR1cm5pbmcgYW4gYXJyYXkgb2YgYWxsIGVsZW1lbnRzXG4gKiBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoIHRocmVlXG4gKiBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAqXG4gKiAqKk5vdGU6KiogVW5saWtlIGByZW1vdmVgLCB0aGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGFycmF5LlxuICpcbiAqIEBzaW5jZSA1LjAuMFxuICogQGNhdGVnb3J5IEFycmF5XG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAqIEBzZWUgcHVsbCwgcHVsbEFsbCwgcHVsbEFsbEJ5LCBwdWxsQWxsV2l0aCwgcHVsbEF0LCByZW1vdmUsIHJlamVjdFxuICogQGV4YW1wbGVcbiAqXG4gKiBjb25zdCB1c2VycyA9IFtcbiAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogdHJ1ZSB9LFxuICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhY3RpdmUnOiBmYWxzZSB9XG4gKiBdXG4gKlxuICogZmlsdGVyKHVzZXJzLCAoeyBhY3RpdmUgfSkgPT4gYWN0aXZlKVxuICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICovXG5mdW5jdGlvbiBmaWx0ZXIoYXJyYXksIHByZWRpY2F0ZSkge1xuICBsZXQgaW5kZXggPSAtMVxuICBsZXQgcmVzSW5kZXggPSAwXG4gIGNvbnN0IGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoXG4gIGNvbnN0IHJlc3VsdCA9IFtdXG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBjb25zdCB2YWx1ZSA9IGFycmF5W2luZGV4XVxuICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBhcnJheSkpIHtcbiAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IHZhbHVlXG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHRcbn1cblxuZXhwb3J0IGRlZmF1bHQgZmlsdGVyXG5jb25zb2xlLmxvZyhcImZpbHRlci5qcyBpcyBleGVjdXRlZCBkdXJpbmcgdGhlIHRlc3RcIik7XG5cbiJdLCJtYXBwaW5ncyI6InF5REFlWTtBQUFBQSxjQUFBLFNBQUFBLENBQUEsU0FBQUMsY0FBQSxXQUFBQSxjQUFBLEVBQUFELGNBQUEsR0FmWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQ0EsUUFBUyxDQUFBRSxNQUFNQSxDQUFDQyxLQUFLLENBQUVDLFNBQVMsQ0FBRSxDQUFBSixjQUFBLEdBQUFLLENBQUEsTUFDaEMsR0FBSSxDQUFBQyxLQUFLLEVBQUFOLGNBQUEsR0FBQU8sQ0FBQSxNQUFHLENBQUMsQ0FBQyxFQUNkLEdBQUksQ0FBQUMsUUFBUSxFQUFBUixjQUFBLEdBQUFPLENBQUEsTUFBRyxDQUFDLEVBQ2hCLEtBQU0sQ0FBQUUsTUFBTSxFQUFBVCxjQUFBLEdBQUFPLENBQUEsTUFBR0osS0FBSyxFQUFJLElBQUksRUFBQUgsY0FBQSxHQUFBVSxDQUFBLFNBQUcsQ0FBQyxHQUFBVixjQUFBLEdBQUFVLENBQUEsU0FBR1AsS0FBSyxDQUFDTSxNQUFNLEdBQy9DLEtBQU0sQ0FBQUUsTUFBTSxFQUFBWCxjQUFBLEdBQUFPLENBQUEsTUFBRyxFQUFFLEVBQUFQLGNBQUEsR0FBQU8sQ0FBQSxNQUVqQixNQUFPLEVBQUVELEtBQUssQ0FBR0csTUFBTSxDQUFFLENBQ3ZCLEtBQU0sQ0FBQUcsS0FBSyxFQUFBWixjQUFBLEdBQUFPLENBQUEsTUFBR0osS0FBSyxDQUFDRyxLQUFLLENBQUMsRUFBQU4sY0FBQSxHQUFBTyxDQUFBLE1BQzFCLEdBQUlILFNBQVMsQ0FBQ1EsS0FBSyxDQUFFTixLQUFLLENBQUVILEtBQUssQ0FBQyxDQUFFLENBQUFILGNBQUEsR0FBQVUsQ0FBQSxTQUFBVixjQUFBLEdBQUFPLENBQUEsTUFDbENJLE1BQU0sQ0FBQ0gsUUFBUSxFQUFFLENBQUMsQ0FBR0ksS0FBSyxDQUM1QixDQUFDLEtBQUFaLGNBQUEsR0FBQVUsQ0FBQSxVQUNILENBQUNWLGNBQUEsR0FBQU8sQ0FBQSxNQUNELE1BQU8sQ0FBQUksTUFBTSxDQUNmLENBRUEsY0FBZSxDQUFBVCxNQUFNLENBQUFGLGNBQUEsR0FBQU8sQ0FBQSxNQUNyQk0sT0FBTyxDQUFDQyxHQUFHLENBQUMsdUNBQXVDLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=