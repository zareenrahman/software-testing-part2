function cov_2fyp3bujie(){var path="D:\\Msc in DS-Course Materials\\Software Testing\\COMP.SE.200-Part 2\\src\\.internal\\baseFindIndex.js";var hash="96377c9a8e0fa9c39a493e339889b104b7c8e661";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"D:\\Msc in DS-Course Materials\\Software Testing\\COMP.SE.200-Part 2\\src\\.internal\\baseFindIndex.js",statementMap:{"0":{start:{line:12,column:21},end:{line:12,column:26}},"1":{start:{line:13,column:14},end:{line:13,column:46}},"2":{start:{line:15,column:2},end:{line:19,column:3}},"3":{start:{line:16,column:4},end:{line:18,column:5}},"4":{start:{line:17,column:6},end:{line:17,column:18}},"5":{start:{line:20,column:2},end:{line:20,column:11}}},fnMap:{"0":{name:"baseFindIndex",decl:{start:{line:11,column:9},end:{line:11,column:22}},loc:{start:{line:11,column:63},end:{line:21,column:1}},line:11}},branchMap:{"0":{loc:{start:{line:13,column:27},end:{line:13,column:45}},type:"cond-expr",locations:[{start:{line:13,column:39},end:{line:13,column:40}},{start:{line:13,column:43},end:{line:13,column:45}}],line:13},"1":{loc:{start:{line:15,column:10},end:{line:15,column:48}},type:"cond-expr",locations:[{start:{line:15,column:22},end:{line:15,column:29}},{start:{line:15,column:32},end:{line:15,column:48}}],line:15},"2":{loc:{start:{line:16,column:4},end:{line:18,column:5}},type:"if",locations:[{start:{line:16,column:4},end:{line:18,column:5}},{start:{line:16,column:4},end:{line:18,column:5}}],line:16}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0},f:{"0":0},b:{"0":[0,0],"1":[0,0],"2":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"96377c9a8e0fa9c39a493e339889b104b7c8e661"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2fyp3bujie=function(){return actualCoverage;};}return actualCoverage;}cov_2fyp3bujie();/**
 * The base implementation of `findIndex` and `findLastIndex`.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} predicate The function invoked per iteration.
 * @param {number} fromIndex The index to search from.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */function baseFindIndex(array,predicate,fromIndex,fromRight){cov_2fyp3bujie().f[0]++;const{length}=(cov_2fyp3bujie().s[0]++,array);let index=(cov_2fyp3bujie().s[1]++,fromIndex+(fromRight?(cov_2fyp3bujie().b[0][0]++,1):(cov_2fyp3bujie().b[0][1]++,-1)));cov_2fyp3bujie().s[2]++;while(fromRight?(cov_2fyp3bujie().b[1][0]++,index--):(cov_2fyp3bujie().b[1][1]++,++index<length)){cov_2fyp3bujie().s[3]++;if(predicate(array[index],index,array)){cov_2fyp3bujie().b[2][0]++;cov_2fyp3bujie().s[4]++;return index;}else{cov_2fyp3bujie().b[2][1]++;}}cov_2fyp3bujie().s[5]++;return-1;}export default baseFindIndex;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMmZ5cDNidWppZSIsImFjdHVhbENvdmVyYWdlIiwiYmFzZUZpbmRJbmRleCIsImFycmF5IiwicHJlZGljYXRlIiwiZnJvbUluZGV4IiwiZnJvbVJpZ2h0IiwiZiIsImxlbmd0aCIsInMiLCJpbmRleCIsImIiXSwic291cmNlcyI6WyJiYXNlRmluZEluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGZpbmRJbmRleGAgYW5kIGBmaW5kTGFzdEluZGV4YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICovXG5mdW5jdGlvbiBiYXNlRmluZEluZGV4KGFycmF5LCBwcmVkaWNhdGUsIGZyb21JbmRleCwgZnJvbVJpZ2h0KSB7XG4gIGNvbnN0IHsgbGVuZ3RoIH0gPSBhcnJheVxuICBsZXQgaW5kZXggPSBmcm9tSW5kZXggKyAoZnJvbVJpZ2h0ID8gMSA6IC0xKVxuXG4gIHdoaWxlICgoZnJvbVJpZ2h0ID8gaW5kZXgtLSA6ICsraW5kZXggPCBsZW5ndGgpKSB7XG4gICAgaWYgKHByZWRpY2F0ZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHtcbiAgICAgIHJldHVybiBpbmRleFxuICAgIH1cbiAgfVxuICByZXR1cm4gLTFcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUZpbmRJbmRleFxuIl0sIm1hcHBpbmdzIjoiOHlEQWVZO0FBQUFBLGNBQUEsU0FBQUEsQ0FBQSxTQUFBQyxjQUFBLFdBQUFBLGNBQUEsRUFBQUQsY0FBQSxHQWZaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQ0EsUUFBUyxDQUFBRSxhQUFhQSxDQUFDQyxLQUFLLENBQUVDLFNBQVMsQ0FBRUMsU0FBUyxDQUFFQyxTQUFTLENBQUUsQ0FBQU4sY0FBQSxHQUFBTyxDQUFBLE1BQzdELEtBQU0sQ0FBRUMsTUFBTyxDQUFDLEVBQUFSLGNBQUEsR0FBQVMsQ0FBQSxNQUFHTixLQUFLLEVBQ3hCLEdBQUksQ0FBQU8sS0FBSyxFQUFBVixjQUFBLEdBQUFTLENBQUEsTUFBR0osU0FBUyxFQUFJQyxTQUFTLEVBQUFOLGNBQUEsR0FBQVcsQ0FBQSxTQUFHLENBQUMsR0FBQVgsY0FBQSxHQUFBVyxDQUFBLFNBQUcsQ0FBQyxDQUFDLEVBQUMsRUFBQVgsY0FBQSxHQUFBUyxDQUFBLE1BRTVDLE1BQVFILFNBQVMsRUFBQU4sY0FBQSxHQUFBVyxDQUFBLFNBQUdELEtBQUssRUFBRSxHQUFBVixjQUFBLEdBQUFXLENBQUEsU0FBRyxFQUFFRCxLQUFLLENBQUdGLE1BQU0sRUFBRyxDQUFBUixjQUFBLEdBQUFTLENBQUEsTUFDL0MsR0FBSUwsU0FBUyxDQUFDRCxLQUFLLENBQUNPLEtBQUssQ0FBQyxDQUFFQSxLQUFLLENBQUVQLEtBQUssQ0FBQyxDQUFFLENBQUFILGNBQUEsR0FBQVcsQ0FBQSxTQUFBWCxjQUFBLEdBQUFTLENBQUEsTUFDekMsTUFBTyxDQUFBQyxLQUFLLENBQ2QsQ0FBQyxLQUFBVixjQUFBLEdBQUFXLENBQUEsVUFDSCxDQUFDWCxjQUFBLEdBQUFTLENBQUEsTUFDRCxNQUFPLENBQUMsQ0FBQyxDQUNYLENBRUEsY0FBZSxDQUFBUCxhQUFhIiwiaWdub3JlTGlzdCI6W119