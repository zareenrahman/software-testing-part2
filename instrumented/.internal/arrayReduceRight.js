function cov_x1uzksmwq(){var path="D:\\Msc in DS-Course Materials\\Software Testing\\COMP.SE.200-Part 2\\src\\.internal\\arrayReduceRight.js";var hash="763298a0a6c7eee159caf534375d601a75681812";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"D:\\Msc in DS-Course Materials\\Software Testing\\COMP.SE.200-Part 2\\src\\.internal\\arrayReduceRight.js",statementMap:{"0":{start:{line:13,column:15},end:{line:13,column:47}},"1":{start:{line:14,column:2},end:{line:16,column:3}},"2":{start:{line:15,column:4},end:{line:15,column:33}},"3":{start:{line:17,column:2},end:{line:19,column:3}},"4":{start:{line:18,column:4},end:{line:18,column:69}},"5":{start:{line:20,column:2},end:{line:20,column:20}}},fnMap:{"0":{name:"arrayReduceRight",decl:{start:{line:12,column:9},end:{line:12,column:25}},loc:{start:{line:12,column:67},end:{line:21,column:1}},line:12}},branchMap:{"0":{loc:{start:{line:13,column:15},end:{line:13,column:47}},type:"cond-expr",locations:[{start:{line:13,column:31},end:{line:13,column:32}},{start:{line:13,column:35},end:{line:13,column:47}}],line:13},"1":{loc:{start:{line:14,column:2},end:{line:16,column:3}},type:"if",locations:[{start:{line:14,column:2},end:{line:16,column:3}},{start:{line:14,column:2},end:{line:16,column:3}}],line:14},"2":{loc:{start:{line:14,column:6},end:{line:14,column:25}},type:"binary-expr",locations:[{start:{line:14,column:6},end:{line:14,column:15}},{start:{line:14,column:19},end:{line:14,column:25}}],line:14}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0},f:{"0":0},b:{"0":[0,0],"1":[0,0],"2":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"763298a0a6c7eee159caf534375d601a75681812"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_x1uzksmwq=function(){return actualCoverage;};}return actualCoverage;}cov_x1uzksmwq();/**
 * A specialized version of `reduceRight` for arrays.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {*} [accumulator] The initial value.
 * @param {boolean} [initAccum] Specify using the last element of `array` as
 *  the initial value.
 * @returns {*} Returns the accumulated value.
 */function arrayReduceRight(array,iteratee,accumulator,initAccum){cov_x1uzksmwq().f[0]++;let length=(cov_x1uzksmwq().s[0]++,array==null?(cov_x1uzksmwq().b[0][0]++,0):(cov_x1uzksmwq().b[0][1]++,array.length));cov_x1uzksmwq().s[1]++;if((cov_x1uzksmwq().b[2][0]++,initAccum)&&(cov_x1uzksmwq().b[2][1]++,length)){cov_x1uzksmwq().b[1][0]++;cov_x1uzksmwq().s[2]++;accumulator=array[--length];}else{cov_x1uzksmwq().b[1][1]++;}cov_x1uzksmwq().s[3]++;while(length--){cov_x1uzksmwq().s[4]++;accumulator=iteratee(accumulator,array[length],length,array);}cov_x1uzksmwq().s[5]++;return accumulator;}export default arrayReduceRight;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfeDF1emtzbXdxIiwiYWN0dWFsQ292ZXJhZ2UiLCJhcnJheVJlZHVjZVJpZ2h0IiwiYXJyYXkiLCJpdGVyYXRlZSIsImFjY3VtdWxhdG9yIiwiaW5pdEFjY3VtIiwiZiIsImxlbmd0aCIsInMiLCJiIl0sInNvdXJjZXMiOlsiYXJyYXlSZWR1Y2VSaWdodC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgcmVkdWNlUmlnaHRgIGZvciBhcnJheXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gVGhlIGluaXRpYWwgdmFsdWUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpbml0QWNjdW1dIFNwZWNpZnkgdXNpbmcgdGhlIGxhc3QgZWxlbWVudCBvZiBgYXJyYXlgIGFzXG4gKiAgdGhlIGluaXRpYWwgdmFsdWUuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGFycmF5UmVkdWNlUmlnaHQoYXJyYXksIGl0ZXJhdGVlLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtKSB7XG4gIGxldCBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aFxuICBpZiAoaW5pdEFjY3VtICYmIGxlbmd0aCkge1xuICAgIGFjY3VtdWxhdG9yID0gYXJyYXlbLS1sZW5ndGhdXG4gIH1cbiAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgYWNjdW11bGF0b3IgPSBpdGVyYXRlZShhY2N1bXVsYXRvciwgYXJyYXlbbGVuZ3RoXSwgbGVuZ3RoLCBhcnJheSlcbiAgfVxuICByZXR1cm4gYWNjdW11bGF0b3Jcbn1cblxuZXhwb3J0IGRlZmF1bHQgYXJyYXlSZWR1Y2VSaWdodFxuIl0sIm1hcHBpbmdzIjoicXpEQWVZO0FBQUFBLGFBQUEsU0FBQUEsQ0FBQSxTQUFBQyxjQUFBLFdBQUFBLGNBQUEsRUFBQUQsYUFBQSxHQWZaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FDQSxRQUFTLENBQUFFLGdCQUFnQkEsQ0FBQ0MsS0FBSyxDQUFFQyxRQUFRLENBQUVDLFdBQVcsQ0FBRUMsU0FBUyxDQUFFLENBQUFOLGFBQUEsR0FBQU8sQ0FBQSxNQUNqRSxHQUFJLENBQUFDLE1BQU0sRUFBQVIsYUFBQSxHQUFBUyxDQUFBLE1BQUdOLEtBQUssRUFBSSxJQUFJLEVBQUFILGFBQUEsR0FBQVUsQ0FBQSxTQUFHLENBQUMsR0FBQVYsYUFBQSxHQUFBVSxDQUFBLFNBQUdQLEtBQUssQ0FBQ0ssTUFBTSxHQUFBUixhQUFBLEdBQUFTLENBQUEsTUFDN0MsR0FBSSxDQUFBVCxhQUFBLEdBQUFVLENBQUEsU0FBQUosU0FBUyxJQUFBTixhQUFBLEdBQUFVLENBQUEsU0FBSUYsTUFBTSxFQUFFLENBQUFSLGFBQUEsR0FBQVUsQ0FBQSxTQUFBVixhQUFBLEdBQUFTLENBQUEsTUFDdkJKLFdBQVcsQ0FBR0YsS0FBSyxDQUFDLEVBQUVLLE1BQU0sQ0FBQyxDQUMvQixDQUFDLEtBQUFSLGFBQUEsR0FBQVUsQ0FBQSxVQUFBVixhQUFBLEdBQUFTLENBQUEsTUFDRCxNQUFPRCxNQUFNLEVBQUUsQ0FBRSxDQUFBUixhQUFBLEdBQUFTLENBQUEsTUFDZkosV0FBVyxDQUFHRCxRQUFRLENBQUNDLFdBQVcsQ0FBRUYsS0FBSyxDQUFDSyxNQUFNLENBQUMsQ0FBRUEsTUFBTSxDQUFFTCxLQUFLLENBQUMsQ0FDbkUsQ0FBQ0gsYUFBQSxHQUFBUyxDQUFBLE1BQ0QsTUFBTyxDQUFBSixXQUFXLENBQ3BCLENBRUEsY0FBZSxDQUFBSCxnQkFBZ0IiLCJpZ25vcmVMaXN0IjpbXX0=