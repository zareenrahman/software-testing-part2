function cov_9l8sqv3b0(){var path="D:\\Msc in DS-Course Materials\\Software Testing\\COMP.SE.200-Part 2\\src\\.internal\\composeArgsRight.js";var hash="5507cc30adc20ee158c28df882ea8806d2343b69";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"D:\\Msc in DS-Course Materials\\Software Testing\\COMP.SE.200-Part 2\\src\\.internal\\composeArgsRight.js",statementMap:{"0":{start:{line:13,column:18},end:{line:13,column:20}},"1":{start:{line:14,column:21},end:{line:14,column:23}},"2":{start:{line:15,column:19},end:{line:15,column:21}},"3":{start:{line:17,column:21},end:{line:17,column:32}},"4":{start:{line:18,column:24},end:{line:18,column:38}},"5":{start:{line:19,column:22},end:{line:19,column:37}},"6":{start:{line:20,column:22},end:{line:20,column:61}},"7":{start:{line:21,column:17},end:{line:21,column:53}},"8":{start:{line:22,column:22},end:{line:22,column:32}},"9":{start:{line:24,column:2},end:{line:26,column:3}},"10":{start:{line:25,column:4},end:{line:25,column:39}},"11":{start:{line:27,column:17},end:{line:27,column:26}},"12":{start:{line:28,column:2},end:{line:30,column:3}},"13":{start:{line:29,column:4},end:{line:29,column:54}},"14":{start:{line:31,column:2},end:{line:35,column:3}},"15":{start:{line:32,column:4},end:{line:34,column:5}},"16":{start:{line:33,column:6},end:{line:33,column:64}},"17":{start:{line:36,column:2},end:{line:36,column:15}}},fnMap:{"0":{name:"composeArgsRight",decl:{start:{line:12,column:9},end:{line:12,column:25}},loc:{start:{line:12,column:62},end:{line:37,column:1}},line:12}},branchMap:{"0":{loc:{start:{line:32,column:4},end:{line:34,column:5}},type:"if",locations:[{start:{line:32,column:4},end:{line:34,column:5}},{start:{line:32,column:4},end:{line:34,column:5}}],line:32},"1":{loc:{start:{line:32,column:8},end:{line:32,column:45}},type:"binary-expr",locations:[{start:{line:32,column:8},end:{line:32,column:19}},{start:{line:32,column:23},end:{line:32,column:45}}],line:32}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0},f:{"0":0},b:{"0":[0,0],"1":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"5507cc30adc20ee158c28df882ea8806d2343b69"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_9l8sqv3b0=function(){return actualCoverage;};}return actualCoverage;}cov_9l8sqv3b0();/**
 * This function is like `composeArgs` except that the arguments composition
 * is tailored for `partialRight`.
 *
 * @private
 * @param {Array} args The provided arguments.
 * @param {Array} partials The arguments to append to those provided.
 * @param {Array} holders The `partials` placeholder indexes.
 * @params {boolean} [isCurried] Specify composing for a curried function.
 * @returns {Array} Returns the new array of composed arguments.
 */function composeArgsRight(args,partials,holders,isCurried){cov_9l8sqv3b0().f[0]++;let argsIndex=(cov_9l8sqv3b0().s[0]++,-1);let holdersIndex=(cov_9l8sqv3b0().s[1]++,-1);let rightIndex=(cov_9l8sqv3b0().s[2]++,-1);const argsLength=(cov_9l8sqv3b0().s[3]++,args.length);const holdersLength=(cov_9l8sqv3b0().s[4]++,holders.length);const rightLength=(cov_9l8sqv3b0().s[5]++,partials.length);const rangeLength=(cov_9l8sqv3b0().s[6]++,Math.max(argsLength-holdersLength,0));const result=(cov_9l8sqv3b0().s[7]++,new Array(rangeLength+rightLength));const isUncurried=(cov_9l8sqv3b0().s[8]++,!isCurried);cov_9l8sqv3b0().s[9]++;while(++argsIndex<rangeLength){cov_9l8sqv3b0().s[10]++;result[argsIndex]=args[argsIndex];}const offset=(cov_9l8sqv3b0().s[11]++,argsIndex);cov_9l8sqv3b0().s[12]++;while(++rightIndex<rightLength){cov_9l8sqv3b0().s[13]++;result[offset+rightIndex]=partials[rightIndex];}cov_9l8sqv3b0().s[14]++;while(++holdersIndex<holdersLength){cov_9l8sqv3b0().s[15]++;if((cov_9l8sqv3b0().b[1][0]++,isUncurried)||(cov_9l8sqv3b0().b[1][1]++,argsIndex<argsLength)){cov_9l8sqv3b0().b[0][0]++;cov_9l8sqv3b0().s[16]++;result[offset+holders[holdersIndex]]=args[argsIndex++];}else{cov_9l8sqv3b0().b[0][1]++;}}cov_9l8sqv3b0().s[17]++;return result;}export default composeArgsRight;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfOWw4c3F2M2IwIiwiYWN0dWFsQ292ZXJhZ2UiLCJjb21wb3NlQXJnc1JpZ2h0IiwiYXJncyIsInBhcnRpYWxzIiwiaG9sZGVycyIsImlzQ3VycmllZCIsImYiLCJhcmdzSW5kZXgiLCJzIiwiaG9sZGVyc0luZGV4IiwicmlnaHRJbmRleCIsImFyZ3NMZW5ndGgiLCJsZW5ndGgiLCJob2xkZXJzTGVuZ3RoIiwicmlnaHRMZW5ndGgiLCJyYW5nZUxlbmd0aCIsIk1hdGgiLCJtYXgiLCJyZXN1bHQiLCJBcnJheSIsImlzVW5jdXJyaWVkIiwib2Zmc2V0IiwiYiJdLCJzb3VyY2VzIjpbImNvbXBvc2VBcmdzUmlnaHQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGNvbXBvc2VBcmdzYCBleGNlcHQgdGhhdCB0aGUgYXJndW1lbnRzIGNvbXBvc2l0aW9uXG4gKiBpcyB0YWlsb3JlZCBmb3IgYHBhcnRpYWxSaWdodGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIHByb3ZpZGVkIGFyZ3VtZW50cy5cbiAqIEBwYXJhbSB7QXJyYXl9IHBhcnRpYWxzIFRoZSBhcmd1bWVudHMgdG8gYXBwZW5kIHRvIHRob3NlIHByb3ZpZGVkLlxuICogQHBhcmFtIHtBcnJheX0gaG9sZGVycyBUaGUgYHBhcnRpYWxzYCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICogQHBhcmFtcyB7Ym9vbGVhbn0gW2lzQ3VycmllZF0gU3BlY2lmeSBjb21wb3NpbmcgZm9yIGEgY3VycmllZCBmdW5jdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNvbXBvc2VkIGFyZ3VtZW50cy5cbiAqL1xuZnVuY3Rpb24gY29tcG9zZUFyZ3NSaWdodChhcmdzLCBwYXJ0aWFscywgaG9sZGVycywgaXNDdXJyaWVkKSB7XG4gIGxldCBhcmdzSW5kZXggPSAtMVxuICBsZXQgaG9sZGVyc0luZGV4ID0gLTFcbiAgbGV0IHJpZ2h0SW5kZXggPSAtMVxuXG4gIGNvbnN0IGFyZ3NMZW5ndGggPSBhcmdzLmxlbmd0aFxuICBjb25zdCBob2xkZXJzTGVuZ3RoID0gaG9sZGVycy5sZW5ndGhcbiAgY29uc3QgcmlnaHRMZW5ndGggPSBwYXJ0aWFscy5sZW5ndGhcbiAgY29uc3QgcmFuZ2VMZW5ndGggPSBNYXRoLm1heChhcmdzTGVuZ3RoIC0gaG9sZGVyc0xlbmd0aCwgMClcbiAgY29uc3QgcmVzdWx0ID0gbmV3IEFycmF5KHJhbmdlTGVuZ3RoICsgcmlnaHRMZW5ndGgpXG4gIGNvbnN0IGlzVW5jdXJyaWVkID0gIWlzQ3VycmllZFxuXG4gIHdoaWxlICgrK2FyZ3NJbmRleCA8IHJhbmdlTGVuZ3RoKSB7XG4gICAgcmVzdWx0W2FyZ3NJbmRleF0gPSBhcmdzW2FyZ3NJbmRleF1cbiAgfVxuICBjb25zdCBvZmZzZXQgPSBhcmdzSW5kZXhcbiAgd2hpbGUgKCsrcmlnaHRJbmRleCA8IHJpZ2h0TGVuZ3RoKSB7XG4gICAgcmVzdWx0W29mZnNldCArIHJpZ2h0SW5kZXhdID0gcGFydGlhbHNbcmlnaHRJbmRleF1cbiAgfVxuICB3aGlsZSAoKytob2xkZXJzSW5kZXggPCBob2xkZXJzTGVuZ3RoKSB7XG4gICAgaWYgKGlzVW5jdXJyaWVkIHx8IGFyZ3NJbmRleCA8IGFyZ3NMZW5ndGgpIHtcbiAgICAgIHJlc3VsdFtvZmZzZXQgKyBob2xkZXJzW2hvbGRlcnNJbmRleF1dID0gYXJnc1thcmdzSW5kZXgrK11cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdFxufVxuXG5leHBvcnQgZGVmYXVsdCBjb21wb3NlQXJnc1JpZ2h0XG4iXSwibWFwcGluZ3MiOiJtMUVBZVk7QUFBQUEsYUFBQSxTQUFBQSxDQUFBLFNBQUFDLGNBQUEsV0FBQUEsY0FBQSxFQUFBRCxhQUFBLEdBZlo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUNBLFFBQVMsQ0FBQUUsZ0JB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