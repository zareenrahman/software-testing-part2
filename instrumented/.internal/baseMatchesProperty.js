function cov_1pnru5yjn(){var path="D:\\Msc in DS-Course Materials\\Software Testing\\COMP.SE.200-Part 2\\src\\.internal\\baseMatchesProperty.js";var hash="b5269a357143bea9390038e9cf58bba0c82bd290";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"D:\\Msc in DS-Course Materials\\Software Testing\\COMP.SE.200-Part 2\\src\\.internal\\baseMatchesProperty.js",statementMap:{"0":{start:{line:10,column:29},end:{line:10,column:30}},"1":{start:{line:11,column:31},end:{line:11,column:32}},"2":{start:{line:22,column:2},end:{line:24,column:3}},"3":{start:{line:23,column:4},end:{line:23,column:57}},"4":{start:{line:25,column:2},end:{line:30,column:3}},"5":{start:{line:26,column:21},end:{line:26,column:38}},"6":{start:{line:27,column:4},end:{line:29,column:86}}},fnMap:{"0":{name:"baseMatchesProperty",decl:{start:{line:21,column:9},end:{line:21,column:28}},loc:{start:{line:21,column:45},end:{line:31,column:1}},line:21},"1":{name:"(anonymous_1)",decl:{start:{line:25,column:9},end:{line:25,column:10}},loc:{start:{line:25,column:21},end:{line:30,column:3}},line:25}},branchMap:{"0":{loc:{start:{line:22,column:2},end:{line:24,column:3}},type:"if",locations:[{start:{line:22,column:2},end:{line:24,column:3}},{start:{line:22,column:2},end:{line:24,column:3}}],line:22},"1":{loc:{start:{line:22,column:6},end:{line:22,column:49}},type:"binary-expr",locations:[{start:{line:22,column:6},end:{line:22,column:17}},{start:{line:22,column:21},end:{line:22,column:49}}],line:22},"2":{loc:{start:{line:27,column:11},end:{line:29,column:86}},type:"cond-expr",locations:[{start:{line:28,column:8},end:{line:28,column:27}},{start:{line:29,column:8},end:{line:29,column:86}}],line:27},"3":{loc:{start:{line:27,column:12},end:{line:27,column:59}},type:"binary-expr",locations:[{start:{line:27,column:12},end:{line:27,column:34}},{start:{line:27,column:38},end:{line:27,column:59}}],line:27}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},f:{"0":0,"1":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"b5269a357143bea9390038e9cf58bba0c82bd290"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1pnru5yjn=function(){return actualCoverage;};}return actualCoverage;}cov_1pnru5yjn();import baseIsEqual from'./baseIsEqual.js';import get from'../get.js';import hasIn from'../hasIn.js';import isKey from'./isKey.js';import isStrictComparable from'./isStrictComparable.js';import matchesStrictComparable from'./matchesStrictComparable.js';import toKey from'./toKey.js';/** Used to compose bitmasks for value comparisons. */const COMPARE_PARTIAL_FLAG=(cov_1pnru5yjn().s[0]++,1);const COMPARE_UNORDERED_FLAG=(cov_1pnru5yjn().s[1]++,2);/**
 * The base implementation of `matchesProperty` which doesn't clone `srcValue`.
 *
 * @private
 * @param {string} path The path of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */function baseMatchesProperty(path,srcValue){cov_1pnru5yjn().f[0]++;cov_1pnru5yjn().s[2]++;if((cov_1pnru5yjn().b[1][0]++,isKey(path))&&(cov_1pnru5yjn().b[1][1]++,isStrictComparable(srcValue))){cov_1pnru5yjn().b[0][0]++;cov_1pnru5yjn().s[3]++;return matchesStrictComparable(toKey(path),srcValue);}else{cov_1pnru5yjn().b[0][1]++;}cov_1pnru5yjn().s[4]++;return object=>{cov_1pnru5yjn().f[1]++;const objValue=(cov_1pnru5yjn().s[5]++,get(object,path));cov_1pnru5yjn().s[6]++;return(cov_1pnru5yjn().b[3][0]++,objValue===undefined)&&(cov_1pnru5yjn().b[3][1]++,objValue===srcValue)?(cov_1pnru5yjn().b[2][0]++,hasIn(object,path)):(cov_1pnru5yjn().b[2][1]++,baseIsEqual(srcValue,objValue,COMPARE_PARTIAL_FLAG|COMPARE_UNORDERED_FLAG));};}export default baseMatchesProperty;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMXBucnU1eWpuIiwiYWN0dWFsQ292ZXJhZ2UiLCJiYXNlSXNFcXVhbCIsImdldCIsImhhc0luIiwiaXNLZXkiLCJpc1N0cmljdENvbXBhcmFibGUiLCJtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZSIsInRvS2V5IiwiQ09NUEFSRV9QQVJUSUFMX0ZMQUciLCJzIiwiQ09NUEFSRV9VTk9SREVSRURfRkxBRyIsImJhc2VNYXRjaGVzUHJvcGVydHkiLCJwYXRoIiwic3JjVmFsdWUiLCJmIiwiYiIsIm9iamVjdCIsIm9ialZhbHVlIiwidW5kZWZpbmVkIl0sInNvdXJjZXMiOlsiYmFzZU1hdGNoZXNQcm9wZXJ0eS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYmFzZUlzRXF1YWwgZnJvbSAnLi9iYXNlSXNFcXVhbC5qcydcbmltcG9ydCBnZXQgZnJvbSAnLi4vZ2V0LmpzJ1xuaW1wb3J0IGhhc0luIGZyb20gJy4uL2hhc0luLmpzJ1xuaW1wb3J0IGlzS2V5IGZyb20gJy4vaXNLZXkuanMnXG5pbXBvcnQgaXNTdHJpY3RDb21wYXJhYmxlIGZyb20gJy4vaXNTdHJpY3RDb21wYXJhYmxlLmpzJ1xuaW1wb3J0IG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlIGZyb20gJy4vbWF0Y2hlc1N0cmljdENvbXBhcmFibGUuanMnXG5pbXBvcnQgdG9LZXkgZnJvbSAnLi90b0tleS5qcydcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG5jb25zdCBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDFcbmNvbnN0IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcgPSAyXG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYG1hdGNoZXNQcm9wZXJ0eWAgd2hpY2ggZG9lc24ndCBjbG9uZSBgc3JjVmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgdmFsdWUgdG8gbWF0Y2guXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlTWF0Y2hlc1Byb3BlcnR5KHBhdGgsIHNyY1ZhbHVlKSB7XG4gIGlmIChpc0tleShwYXRoKSAmJiBpc1N0cmljdENvbXBhcmFibGUoc3JjVmFsdWUpKSB7XG4gICAgcmV0dXJuIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlKHRvS2V5KHBhdGgpLCBzcmNWYWx1ZSlcbiAgfVxuICByZXR1cm4gKG9iamVjdCkgPT4ge1xuICAgIGNvbnN0IG9ialZhbHVlID0gZ2V0KG9iamVjdCwgcGF0aClcbiAgICByZXR1cm4gKG9ialZhbHVlID09PSB1bmRlZmluZWQgJiYgb2JqVmFsdWUgPT09IHNyY1ZhbHVlKVxuICAgICAgPyBoYXNJbihvYmplY3QsIHBhdGgpXG4gICAgICA6IGJhc2VJc0VxdWFsKHNyY1ZhbHVlLCBvYmpWYWx1ZSwgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgfCBDT01QQVJFX1VOT1JERVJFRF9GTEFHKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VNYXRjaGVzUHJvcGVydHlcbiJdLCJtYXBwaW5ncyI6IjB1RUFlWTtBQUFBQSxhQUFBLFNBQUFBLENBQUEsU0FBQUMsY0FBQSxXQUFBQSxjQUFBLEVBQUFELGFBQUEsR0FmWixNQUFPLENBQUFFLFdBQVcsS0FBTSxrQkFBa0IsQ0FDMUMsTUFBTyxDQUFBQyxHQUFHLEtBQU0sV0FBVyxDQUMzQixNQUFPLENBQUFDLEtBQUssS0FBTSxhQUFhLENBQy9CLE1BQU8sQ0FBQUMsS0FBSyxLQUFNLFlBQVksQ0FDOUIsTUFBTyxDQUFBQyxrQkFBa0IsS0FBTSx5QkFBeUIsQ0FDeEQsTUFBTyxDQUFBQyx1QkFBdUIsS0FBTSw4QkFBOEIsQ0FDbEUsTUFBTyxDQUFBQyxLQUFLLEtBQU0sWUFBWSxDQUU5QixzREFDQSxLQUFNLENBQUFDLG9CQUFvQixFQUFBVCxhQUFBLEdBQUFVLENBQUEsTUFBRyxDQUFDLEVBQzlCLEtBQU0sQ0FBQUMsc0JBQXNCLEVBQUFYLGFBQUEsR0FBQVUsQ0FBQSxNQUFHLENBQUMsRUFFaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUNBLFFBQVMsQ0FBQUUsbUJBQW1CQSxDQUFDQyxJQUFJLENBQUVDLFFBQVEsQ0FBRSxDQUFBZCxhQUFBLEdBQUFlLENBQUEsTUFBQWYsYUFBQSxHQUFBVSxDQUFBLE1BQzNDLEdBQUksQ0FBQVYsYUFBQSxHQUFBZ0IsQ0FBQSxTQUFBWCxLQUFLLENBQUNRLElBQUksQ0FBQyxJQUFBYixhQUFBLEdBQUFnQixDQUFBLFNBQUlWLGtCQUFrQixDQUFDUSxRQUFRLENBQUMsRUFBRSxDQUFBZCxhQUFBLEdBQUFnQixDQUFBLFNBQUFoQixhQUFBLEdBQUFVLENBQUEsTUFDL0MsTUFBTyxDQUFBSCx1QkFBdUIsQ0FBQ0MsS0FBSyxDQUFDSyxJQUFJLENBQUMsQ0FBRUMsUUFBUSxDQUFDLENBQ3ZELENBQUMsS0FBQWQsYUFBQSxHQUFBZ0IsQ0FBQSxVQUFBaEIsYUFBQSxHQUFBVSxDQUFBLE1BQ0QsTUFBUSxDQUFBTyxNQUFNLEVBQUssQ0FBQWpCLGFBQUEsR0FBQWUsQ0FBQSxNQUNqQixLQUFNLENBQUFHLFFBQVEsRUFBQWxCLGFBQUEsR0FBQVUsQ0FBQSxNQUFHUCxHQUFHLENBQUNjLE1BQU0sQ0FBRUosSUFBSSxDQUFDLEVBQUFiLGFBQUEsR0FBQVUsQ0FBQSxNQUNsQyxNQUFRLENBQUFWLGFBQUEsR0FBQWdCLENBQUEsU0FBQUUsUUFBUSxHQUFLQyxTQUFTLElBQUFuQixhQUFBLEdBQUFnQixDQUFBLFNBQUlFLFFBQVEsR0FBS0osUUFBUSxHQUFBZCxhQUFBLEdBQUFnQixDQUFBLFNBQ25EWixLQUFLLENBQUNhLE1BQU0sQ0FBRUosSUFBSSxDQUFDLEdBQUFiLGFBQUEsR0FBQWdCLENBQUEsU0FDbkJkLFdBQVcsQ0FBQ1ksUUFBUSxDQUFFSSxRQUFRLENBQUVULG9CQUFvQixDQUFHRSxzQkFBc0IsQ0FBQyxFQUNwRixDQUFDLENBQ0gsQ0FFQSxjQUFlLENBQUFDLG1CQUFtQiIsImlnbm9yZUxpc3QiOltdfQ==