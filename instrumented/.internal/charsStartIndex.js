function cov_1xkq817ap6(){var path="D:\\Msc in DS-Course Materials\\Software Testing\\COMP.SE.200-Part 2\\src\\.internal\\charsStartIndex.js";var hash="6b5c6db3014f5e7e8be28edafa690745dd9ab13a";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"D:\\Msc in DS-Course Materials\\Software Testing\\COMP.SE.200-Part 2\\src\\.internal\\charsStartIndex.js",statementMap:{"0":{start:{line:13,column:14},end:{line:13,column:16}},"1":{start:{line:14,column:17},end:{line:14,column:34}},"2":{start:{line:16,column:2},end:{line:16,column:83}},"3":{start:{line:17,column:2},end:{line:17,column:14}}},fnMap:{"0":{name:"charsStartIndex",decl:{start:{line:12,column:9},end:{line:12,column:24}},loc:{start:{line:12,column:49},end:{line:18,column:1}},line:12}},branchMap:{"0":{loc:{start:{line:16,column:9},end:{line:16,column:79}},type:"binary-expr",locations:[{start:{line:16,column:9},end:{line:16,column:25}},{start:{line:16,column:29},end:{line:16,column:79}}],line:16}},s:{"0":0,"1":0,"2":0,"3":0},f:{"0":0},b:{"0":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"6b5c6db3014f5e7e8be28edafa690745dd9ab13a"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1xkq817ap6=function(){return actualCoverage;};}return actualCoverage;}cov_1xkq817ap6();import baseIndexOf from'./baseIndexOf.js';/**
 * Used by `trim` and `trimStart` to get the index of the first string symbol
 * that is not found in the character symbols.
 *
 * @private
 * @param {Array} strSymbols The string symbols to inspect.
 * @param {Array} chrSymbols The character symbols to find.
 * @returns {number} Returns the index of the first unmatched string symbol.
 */function charsStartIndex(strSymbols,chrSymbols){cov_1xkq817ap6().f[0]++;let index=(cov_1xkq817ap6().s[0]++,-1);const length=(cov_1xkq817ap6().s[1]++,strSymbols.length);cov_1xkq817ap6().s[2]++;while((cov_1xkq817ap6().b[0][0]++,++index<length)&&(cov_1xkq817ap6().b[0][1]++,baseIndexOf(chrSymbols,strSymbols[index],0)>-1)){}cov_1xkq817ap6().s[3]++;return index;}export default charsStartIndex;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMXhrcTgxN2FwNiIsImFjdHVhbENvdmVyYWdlIiwiYmFzZUluZGV4T2YiLCJjaGFyc1N0YXJ0SW5kZXgiLCJzdHJTeW1ib2xzIiwiY2hyU3ltYm9scyIsImYiLCJpbmRleCIsInMiLCJsZW5ndGgiLCJiIl0sInNvdXJjZXMiOlsiY2hhcnNTdGFydEluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBiYXNlSW5kZXhPZiBmcm9tICcuL2Jhc2VJbmRleE9mLmpzJ1xuXG4vKipcbiAqIFVzZWQgYnkgYHRyaW1gIGFuZCBgdHJpbVN0YXJ0YCB0byBnZXQgdGhlIGluZGV4IG9mIHRoZSBmaXJzdCBzdHJpbmcgc3ltYm9sXG4gKiB0aGF0IGlzIG5vdCBmb3VuZCBpbiB0aGUgY2hhcmFjdGVyIHN5bWJvbHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IHN0clN5bWJvbHMgVGhlIHN0cmluZyBzeW1ib2xzIHRvIGluc3BlY3QuXG4gKiBAcGFyYW0ge0FycmF5fSBjaHJTeW1ib2xzIFRoZSBjaGFyYWN0ZXIgc3ltYm9scyB0byBmaW5kLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IHVubWF0Y2hlZCBzdHJpbmcgc3ltYm9sLlxuICovXG5mdW5jdGlvbiBjaGFyc1N0YXJ0SW5kZXgoc3RyU3ltYm9scywgY2hyU3ltYm9scykge1xuICBsZXQgaW5kZXggPSAtMVxuICBjb25zdCBsZW5ndGggPSBzdHJTeW1ib2xzLmxlbmd0aFxuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoICYmIGJhc2VJbmRleE9mKGNoclN5bWJvbHMsIHN0clN5bWJvbHNbaW5kZXhdLCAwKSA+IC0xKSB7fVxuICByZXR1cm4gaW5kZXhcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2hhcnNTdGFydEluZGV4XG4iXSwibWFwcGluZ3MiOiIreENBZVk7QUFBQUEsY0FBQSxTQUFBQSxDQUFBLFNBQUFDLGNBQUEsV0FBQUEsY0FBQSxFQUFBRCxjQUFBLEdBZlosTUFBTyxDQUFBRSxXQUFXLEtBQU0sa0JBQWtCLENBRTFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUNBLFFBQVMsQ0FBQUMsZUFBZUEsQ0FBQ0MsVUFBVSxDQUFFQyxVQUFVLENBQUUsQ0FBQUwsY0FBQSxHQUFBTSxDQUFBLE1BQy9DLEdBQUksQ0FBQUMsS0FBSyxFQUFBUCxjQUFBLEdBQUFRLENBQUEsTUFBRyxDQUFDLENBQUMsRUFDZCxLQUFNLENBQUFDLE1BQU0sRUFBQVQsY0FBQSxHQUFBUSxDQUFBLE1BQUdKLFVBQVUsQ0FBQ0ssTUFBTSxFQUFBVCxjQUFBLEdBQUFRLENBQUEsTUFFaEMsTUFBTyxDQUFBUixjQUFBLEdBQUFVLENBQUEsV0FBRUgsS0FBSyxDQUFHRSxNQUFNLElBQUFULGNBQUEsR0FBQVUsQ0FBQSxTQUFJUixXQUFXLENBQUNHLFVBQVUsQ0FBRUQsVUFBVSxDQUFDRyxLQUFLLENBQUMsQ0FBRSxDQUFDLENBQUMsQ0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUNQLGNBQUEsR0FBQVEsQ0FBQSxNQUNqRixNQUFPLENBQUFELEtBQUssQ0FDZCxDQUVBLGNBQWUsQ0FBQUosZUFBZSIsImlnbm9yZUxpc3QiOltdfQ==