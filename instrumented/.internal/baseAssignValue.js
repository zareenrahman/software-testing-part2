function cov_1psd0qp05k(){var path="D:\\Msc in DS-Course Materials\\Software Testing\\COMP.SE.200-Part 2\\src\\.internal\\baseAssignValue.js";var hash="4a1f0424c36cecdbf99393dec08f3d1676260127";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"D:\\Msc in DS-Course Materials\\Software Testing\\COMP.SE.200-Part 2\\src\\.internal\\baseAssignValue.js",statementMap:{"0":{start:{line:11,column:2},end:{line:20,column:3}},"1":{start:{line:12,column:4},end:{line:17,column:6}},"2":{start:{line:19,column:4},end:{line:19,column:23}}},fnMap:{"0":{name:"baseAssignValue",decl:{start:{line:10,column:9},end:{line:10,column:24}},loc:{start:{line:10,column:45},end:{line:21,column:1}},line:10}},branchMap:{"0":{loc:{start:{line:11,column:2},end:{line:20,column:3}},type:"if",locations:[{start:{line:11,column:2},end:{line:20,column:3}},{start:{line:11,column:2},end:{line:20,column:3}}],line:11}},s:{"0":0,"1":0,"2":0},f:{"0":0},b:{"0":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"4a1f0424c36cecdbf99393dec08f3d1676260127"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1psd0qp05k=function(){return actualCoverage;};}return actualCoverage;}cov_1psd0qp05k();/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */function baseAssignValue(object,key,value){cov_1psd0qp05k().f[0]++;cov_1psd0qp05k().s[0]++;if(key=='__proto__'){cov_1psd0qp05k().b[0][0]++;cov_1psd0qp05k().s[1]++;Object.defineProperty(object,key,{'configurable':true,'enumerable':true,'value':value,'writable':true});}else{cov_1psd0qp05k().b[0][1]++;cov_1psd0qp05k().s[2]++;object[key]=value;}}export default baseAssignValue;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMXBzZDBxcDA1ayIsImFjdHVhbENvdmVyYWdlIiwiYmFzZUFzc2lnblZhbHVlIiwib2JqZWN0Iiwia2V5IiwidmFsdWUiLCJmIiwicyIsImIiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSJdLCJzb3VyY2VzIjpbImJhc2VBc3NpZ25WYWx1ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBhc3NpZ25WYWx1ZWAgYW5kIGBhc3NpZ25NZXJnZVZhbHVlYCB3aXRob3V0XG4gKiB2YWx1ZSBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAqL1xuZnVuY3Rpb24gYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5ID09ICdfX3Byb3RvX18nKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iamVjdCwga2V5LCB7XG4gICAgICAnY29uZmlndXJhYmxlJzogdHJ1ZSxcbiAgICAgICdlbnVtZXJhYmxlJzogdHJ1ZSxcbiAgICAgICd2YWx1ZSc6IHZhbHVlLFxuICAgICAgJ3dyaXRhYmxlJzogdHJ1ZVxuICAgIH0pXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0W2tleV0gPSB2YWx1ZVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VBc3NpZ25WYWx1ZVxuIl0sIm1hcHBpbmdzIjoiaXRDQWVZO0FBQUFBLGNBQUEsU0FBQUEsQ0FBQSxTQUFBQyxjQUFBLFdBQUFBLGNBQUEsRUFBQUQsY0FBQSxHQWZaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUNBLFFBQVMsQ0FBQUUsZUFBZUEsQ0FBQ0MsTUFBTSxDQUFFQyxHQUFHLENBQUVDLEtBQUssQ0FBRSxDQUFBTCxjQUFBLEdBQUFNLENBQUEsTUFBQU4sY0FBQSxHQUFBTyxDQUFBLE1BQzNDLEdBQUlILEdBQUcsRUFBSSxXQUFXLENBQUUsQ0FBQUosY0FBQSxHQUFBUSxDQUFBLFNBQUFSLGNBQUEsR0FBQU8sQ0FBQSxNQUN0QkUsTUFBTSxDQUFDQyxjQUFjLENBQUNQLE1BQU0sQ0FBRUMsR0FBRyxDQUFFLENBQ2pDLGNBQWMsQ0FBRSxJQUFJLENBQ3BCLFlBQVksQ0FBRSxJQUFJLENBQ2xCLE9BQU8sQ0FBRUMsS0FBSyxDQUNkLFVBQVUsQ0FBRSxJQUNkLENBQUMsQ0FBQyxDQUNKLENBQUMsSUFBTSxDQUFBTCxjQUFBLEdBQUFRLENBQUEsU0FBQVIsY0FBQSxHQUFBTyxDQUFBLE1BQ0xKLE1BQU0sQ0FBQ0MsR0FBRyxDQUFDLENBQUdDLEtBQUssQ0FDckIsQ0FDRixDQUVBLGNBQWUsQ0FBQUgsZUFBZSIsImlnbm9yZUxpc3QiOltdfQ==