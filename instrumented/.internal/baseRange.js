function cov_2p56zlexdv(){var path="D:\\Msc in DS-Course Materials\\Software Testing\\COMP.SE.200-Part 2\\src\\.internal\\baseRange.js";var hash="751c8031ba7bd51933dfb5c45573007bec409b5f";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"D:\\Msc in DS-Course Materials\\Software Testing\\COMP.SE.200-Part 2\\src\\.internal\\baseRange.js",statementMap:{"0":{start:{line:13,column:14},end:{line:13,column:16}},"1":{start:{line:14,column:15},end:{line:14,column:66}},"2":{start:{line:15,column:17},end:{line:15,column:34}},"3":{start:{line:17,column:2},end:{line:20,column:3}},"4":{start:{line:18,column:4},end:{line:18,column:48}},"5":{start:{line:19,column:4},end:{line:19,column:17}},"6":{start:{line:21,column:2},end:{line:21,column:15}}},fnMap:{"0":{name:"baseRange",decl:{start:{line:12,column:9},end:{line:12,column:18}},loc:{start:{line:12,column:48},end:{line:22,column:1}},line:12}},branchMap:{"0":{loc:{start:{line:14,column:51},end:{line:14,column:60}},type:"binary-expr",locations:[{start:{line:14,column:51},end:{line:14,column:55}},{start:{line:14,column:59},end:{line:14,column:60}}],line:14},"1":{loc:{start:{line:18,column:11},end:{line:18,column:39}},type:"cond-expr",locations:[{start:{line:18,column:23},end:{line:18,column:29}},{start:{line:18,column:32},end:{line:18,column:39}}],line:18}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},f:{"0":0},b:{"0":[0,0],"1":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"751c8031ba7bd51933dfb5c45573007bec409b5f"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2p56zlexdv=function(){return actualCoverage;};}return actualCoverage;}cov_2p56zlexdv();/**
 * The base implementation of `range` and `rangeRight` which doesn't
 * coerce arguments.
 *
 * @private
 * @param {number} start The start of the range.
 * @param {number} end The end of the range.
 * @param {number} step The value to increment or decrement by.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Array} Returns the range of numbers.
 */function baseRange(start,end,step,fromRight){cov_2p56zlexdv().f[0]++;let index=(cov_2p56zlexdv().s[0]++,-1);let length=(cov_2p56zlexdv().s[1]++,Math.max(Math.ceil((end-start)/((cov_2p56zlexdv().b[0][0]++,step)||(cov_2p56zlexdv().b[0][1]++,1))),0));const result=(cov_2p56zlexdv().s[2]++,new Array(length));cov_2p56zlexdv().s[3]++;while(length--){cov_2p56zlexdv().s[4]++;result[fromRight?(cov_2p56zlexdv().b[1][0]++,length):(cov_2p56zlexdv().b[1][1]++,++index)]=start;cov_2p56zlexdv().s[5]++;start+=step;}cov_2p56zlexdv().s[6]++;return result;}export default baseRange;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMnA1NnpsZXhkdiIsImFjdHVhbENvdmVyYWdlIiwiYmFzZVJhbmdlIiwic3RhcnQiLCJlbmQiLCJzdGVwIiwiZnJvbVJpZ2h0IiwiZiIsImluZGV4IiwicyIsImxlbmd0aCIsIk1hdGgiLCJtYXgiLCJjZWlsIiwiYiIsInJlc3VsdCIsIkFycmF5Il0sInNvdXJjZXMiOlsiYmFzZVJhbmdlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYHJhbmdlYCBhbmQgYHJhbmdlUmlnaHRgIHdoaWNoIGRvZXNuJ3RcbiAqIGNvZXJjZSBhcmd1bWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBzdGVwIFRoZSB2YWx1ZSB0byBpbmNyZW1lbnQgb3IgZGVjcmVtZW50IGJ5LlxuICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmdlIG9mIG51bWJlcnMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VSYW5nZShzdGFydCwgZW5kLCBzdGVwLCBmcm9tUmlnaHQpIHtcbiAgbGV0IGluZGV4ID0gLTFcbiAgbGV0IGxlbmd0aCA9IE1hdGgubWF4KE1hdGguY2VpbCgoZW5kIC0gc3RhcnQpIC8gKHN0ZXAgfHwgMSkpLCAwKVxuICBjb25zdCByZXN1bHQgPSBuZXcgQXJyYXkobGVuZ3RoKVxuXG4gIHdoaWxlIChsZW5ndGgtLSkge1xuICAgIHJlc3VsdFtmcm9tUmlnaHQgPyBsZW5ndGggOiArK2luZGV4XSA9IHN0YXJ0XG4gICAgc3RhcnQgKz0gc3RlcFxuICB9XG4gIHJldHVybiByZXN1bHRcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZVJhbmdlXG4iXSwibWFwcGluZ3MiOiIycERBZVk7QUFBQUEsY0FBQSxTQUFBQSxDQUFBLFNBQUFDLGNBQUEsV0FBQUEsY0FBQSxFQUFBRCxjQUFBLEdBZlo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUNBLFFBQVMsQ0FBQUUsU0FBU0EsQ0FBQ0MsS0FBSyxDQUFFQyxHQUFHLENBQUVDLElBQUksQ0FBRUMsU0FBUyxDQUFFLENBQUFOLGNBQUEsR0FBQU8sQ0FBQSxNQUM5QyxHQUFJLENBQUFDLEtBQUssRUFBQVIsY0FBQSxHQUFBUyxDQUFBLE1BQUcsQ0FBQyxDQUFDLEVBQ2QsR0FBSSxDQUFBQyxNQUFNLEVBQUFWLGNBQUEsR0FBQVMsQ0FBQSxNQUFHRSxJQUFJLENBQUNDLEdBQUcsQ0FBQ0QsSUFBSSxDQUFDRSxJQUFJLENBQUMsQ0FBQ1QsR0FBRyxDQUFHRCxLQUFLLEdBQUssQ0FBQUgsY0FBQSxHQUFBYyxDQUFBLFNBQUFULElBQUksSUFBQUwsY0FBQSxHQUFBYyxDQUFBLFNBQUksQ0FBQyxFQUFDLENBQUMsQ0FBRSxDQUFDLENBQUMsRUFDaEUsS0FBTSxDQUFBQyxNQUFNLEVBQUFmLGNBQUEsR0FBQVMsQ0FBQSxNQUFHLEdBQUksQ0FBQU8sS0FBSyxDQUFDTixNQUFNLENBQUMsRUFBQVYsY0FBQSxHQUFBUyxDQUFBLE1BRWhDLE1BQU9DLE1BQU0sRUFBRSxDQUFFLENBQUFWLGNBQUEsR0FBQVMsQ0FBQSxNQUNmTSxNQUFNLENBQUNULFNBQVMsRUFBQU4sY0FBQSxHQUFBYyxDQUFBLFNBQUdKLE1BQU0sR0FBQVYsY0FBQSxHQUFBYyxDQUFBLFNBQUcsRUFBRU4sS0FBSyxFQUFDLENBQUdMLEtBQUssQ0FBQUgsY0FBQSxHQUFBUyxDQUFBLE1BQzVDTixLQUFLLEVBQUlFLElBQUksQ0FDZixDQUFDTCxjQUFBLEdBQUFTLENBQUEsTUFDRCxNQUFPLENBQUFNLE1BQU0sQ0FDZixDQUVBLGNBQWUsQ0FBQWIsU0FBUyIsImlnbm9yZUxpc3QiOltdfQ==