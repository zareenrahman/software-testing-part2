function cov_ebiewhwhq(){var path="D:\\Msc in DS-Course Materials\\Software Testing\\COMP.SE.200-Part 2\\src\\.internal\\baseToNumber.js";var hash="47ea7ba39ec1472a98c6544463b7c1b9b57e3055";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"D:\\Msc in DS-Course Materials\\Software Testing\\COMP.SE.200-Part 2\\src\\.internal\\baseToNumber.js",statementMap:{"0":{start:{line:4,column:12},end:{line:4,column:17}},"1":{start:{line:15,column:2},end:{line:17,column:3}},"2":{start:{line:16,column:4},end:{line:16,column:16}},"3":{start:{line:18,column:2},end:{line:20,column:3}},"4":{start:{line:19,column:4},end:{line:19,column:14}},"5":{start:{line:21,column:2},end:{line:21,column:15}}},fnMap:{"0":{name:"baseToNumber",decl:{start:{line:14,column:9},end:{line:14,column:21}},loc:{start:{line:14,column:29},end:{line:22,column:1}},line:14}},branchMap:{"0":{loc:{start:{line:15,column:2},end:{line:17,column:3}},type:"if",locations:[{start:{line:15,column:2},end:{line:17,column:3}},{start:{line:15,column:2},end:{line:17,column:3}}],line:15},"1":{loc:{start:{line:18,column:2},end:{line:20,column:3}},type:"if",locations:[{start:{line:18,column:2},end:{line:20,column:3}},{start:{line:18,column:2},end:{line:20,column:3}}],line:18}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0},f:{"0":0},b:{"0":[0,0],"1":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"47ea7ba39ec1472a98c6544463b7c1b9b57e3055"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_ebiewhwhq=function(){return actualCoverage;};}return actualCoverage;}cov_ebiewhwhq();import isSymbol from'../isSymbol.js';/** Used as references for various `Number` constants. */const NAN=(cov_ebiewhwhq().s[0]++,0/0);/**
 * The base implementation of `toNumber` which doesn't ensure correct
 * conversions of binary, hexadecimal, or octal string values.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 */function baseToNumber(value){cov_ebiewhwhq().f[0]++;cov_ebiewhwhq().s[1]++;if(typeof value==='number'){cov_ebiewhwhq().b[0][0]++;cov_ebiewhwhq().s[2]++;return value;}else{cov_ebiewhwhq().b[0][1]++;}cov_ebiewhwhq().s[3]++;if(isSymbol(value)){cov_ebiewhwhq().b[1][0]++;cov_ebiewhwhq().s[4]++;return NAN;}else{cov_ebiewhwhq().b[1][1]++;}cov_ebiewhwhq().s[5]++;return+value;}export default baseToNumber;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfZWJpZXdod2hxIiwiYWN0dWFsQ292ZXJhZ2UiLCJpc1N5bWJvbCIsIk5BTiIsInMiLCJiYXNlVG9OdW1iZXIiLCJ2YWx1ZSIsImYiLCJiIl0sInNvdXJjZXMiOlsiYmFzZVRvTnVtYmVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBpc1N5bWJvbCBmcm9tICcuLi9pc1N5bWJvbC5qcydcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG5jb25zdCBOQU4gPSAwIC8gMFxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGB0b051bWJlcmAgd2hpY2ggZG9lc24ndCBlbnN1cmUgY29ycmVjdFxuICogY29udmVyc2lvbnMgb2YgYmluYXJ5LCBoZXhhZGVjaW1hbCwgb3Igb2N0YWwgc3RyaW5nIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG51bWJlci5cbiAqL1xuZnVuY3Rpb24gYmFzZVRvTnVtYmVyKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIHZhbHVlXG4gIH1cbiAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiBOQU5cbiAgfVxuICByZXR1cm4gK3ZhbHVlXG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VUb051bWJlclxuIl0sIm1hcHBpbmdzIjoicWtEQWVZO0FBQUFBLGFBQUEsU0FBQUEsQ0FBQSxTQUFBQyxjQUFBLFdBQUFBLGNBQUEsRUFBQUQsYUFBQSxHQWZaLE1BQU8sQ0FBQUUsUUFBUSxLQUFNLGdCQUFnQixDQUVyQyx5REFDQSxLQUFNLENBQUFDLEdBQUcsRUFBQUgsYUFBQSxHQUFBSSxDQUFBLE1BQUcsQ0FBQyxDQUFHLENBQUMsRUFFakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUNBLFFBQVMsQ0FBQUMsWUFBWUEsQ0FBQ0MsS0FBSyxDQUFFLENBQUFOLGFBQUEsR0FBQU8sQ0FBQSxNQUFBUCxhQUFBLEdBQUFJLENBQUEsTUFDM0IsR0FBSSxNQUFPLENBQUFFLEtBQUssR0FBSyxRQUFRLENBQUUsQ0FBQU4sYUFBQSxHQUFBUSxDQUFBLFNBQUFSLGFBQUEsR0FBQUksQ0FBQSxNQUM3QixNQUFPLENBQUFFLEtBQUssQ0FDZCxDQUFDLEtBQUFOLGFBQUEsR0FBQVEsQ0FBQSxVQUFBUixhQUFBLEdBQUFJLENBQUEsTUFDRCxHQUFJRixRQUFRLENBQUNJLEtBQUssQ0FBQyxDQUFFLENBQUFOLGFBQUEsR0FBQVEsQ0FBQSxTQUFBUixhQUFBLEdBQUFJLENBQUEsTUFDbkIsTUFBTyxDQUFBRCxHQUFHLENBQ1osQ0FBQyxLQUFBSCxhQUFBLEdBQUFRLENBQUEsVUFBQVIsYUFBQSxHQUFBSSxDQUFBLE1BQ0QsTUFBTyxDQUFDRSxLQUFLLENBQ2YsQ0FFQSxjQUFlLENBQUFELFlBQVkiLCJpZ25vcmVMaXN0IjpbXX0=