function cov_2i6lsah54d(){var path="D:\\Msc in DS-Course Materials\\Software Testing\\COMP.SE.200-Part 2\\src\\.internal\\setToArray.js";var hash="8264696c4ca06231cc4a87973ab0c76652a45ebe";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"D:\\Msc in DS-Course Materials\\Software Testing\\COMP.SE.200-Part 2\\src\\.internal\\setToArray.js",statementMap:{"0":{start:{line:9,column:14},end:{line:9,column:16}},"1":{start:{line:10,column:17},end:{line:10,column:36}},"2":{start:{line:12,column:2},end:{line:14,column:4}},"3":{start:{line:13,column:4},end:{line:13,column:27}},"4":{start:{line:15,column:2},end:{line:15,column:15}}},fnMap:{"0":{name:"setToArray",decl:{start:{line:8,column:9},end:{line:8,column:19}},loc:{start:{line:8,column:25},end:{line:16,column:1}},line:8},"1":{name:"(anonymous_1)",decl:{start:{line:12,column:14},end:{line:12,column:15}},loc:{start:{line:12,column:25},end:{line:14,column:3}},line:12}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0},f:{"0":0,"1":0},b:{},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"8264696c4ca06231cc4a87973ab0c76652a45ebe"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2i6lsah54d=function(){return actualCoverage;};}return actualCoverage;}cov_2i6lsah54d();/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */function setToArray(set){cov_2i6lsah54d().f[0]++;let index=(cov_2i6lsah54d().s[0]++,-1);const result=(cov_2i6lsah54d().s[1]++,new Array(set.size));cov_2i6lsah54d().s[2]++;set.forEach(value=>{cov_2i6lsah54d().f[1]++;cov_2i6lsah54d().s[3]++;result[++index]=value;});cov_2i6lsah54d().s[4]++;return result;}export default setToArray;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMmk2bHNhaDU0ZCIsImFjdHVhbENvdmVyYWdlIiwic2V0VG9BcnJheSIsInNldCIsImYiLCJpbmRleCIsInMiLCJyZXN1bHQiLCJBcnJheSIsInNpemUiLCJmb3JFYWNoIiwidmFsdWUiXSwic291cmNlcyI6WyJzZXRUb0FycmF5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29udmVydHMgYHNldGAgdG8gYW4gYXJyYXkgb2YgaXRzIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNldCBUaGUgc2V0IHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHZhbHVlcy5cbiAqL1xuZnVuY3Rpb24gc2V0VG9BcnJheShzZXQpIHtcbiAgbGV0IGluZGV4ID0gLTFcbiAgY29uc3QgcmVzdWx0ID0gbmV3IEFycmF5KHNldC5zaXplKVxuXG4gIHNldC5mb3JFYWNoKCh2YWx1ZSkgPT4ge1xuICAgIHJlc3VsdFsrK2luZGV4XSA9IHZhbHVlXG4gIH0pXG4gIHJldHVybiByZXN1bHRcbn1cblxuZXhwb3J0IGRlZmF1bHQgc2V0VG9BcnJheVxuIl0sIm1hcHBpbmdzIjoiNHdDQWVZO0FBQUFBLGNBQUEsU0FBQUEsQ0FBQSxTQUFBQyxjQUFBLFdBQUFBLGNBQUEsRUFBQUQsY0FBQSxHQWZaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQ0EsUUFBUyxDQUFBRSxVQUFVQSxDQUFDQyxHQUFHLENBQUUsQ0FBQUgsY0FBQSxHQUFBSSxDQUFBLE1BQ3ZCLEdBQUksQ0FBQUMsS0FBSyxFQUFBTCxjQUFBLEdBQUFNLENBQUEsTUFBRyxDQUFDLENBQUMsRUFDZCxLQUFNLENBQUFDLE1BQU0sRUFBQVAsY0FBQSxHQUFBTSxDQUFBLE1BQUcsR0FBSSxDQUFBRSxLQUFLLENBQUNMLEdBQUcsQ0FBQ00sSUFBSSxDQUFDLEVBQUFULGNBQUEsR0FBQU0sQ0FBQSxNQUVsQ0gsR0FBRyxDQUFDTyxPQUFPLENBQUVDLEtBQUssRUFBSyxDQUFBWCxjQUFBLEdBQUFJLENBQUEsTUFBQUosY0FBQSxHQUFBTSxDQUFBLE1BQ3JCQyxNQUFNLENBQUMsRUFBRUYsS0FBSyxDQUFDLENBQUdNLEtBQUssQ0FDekIsQ0FBQyxDQUFDLENBQUFYLGNBQUEsR0FBQU0sQ0FBQSxNQUNGLE1BQU8sQ0FBQUMsTUFBTSxDQUNmLENBRUEsY0FBZSxDQUFBTCxVQUFVIiwiaWdub3JlTGlzdCI6W119