function cov_zrwk4944(){var path="D:\\Msc in DS-Course Materials\\Software Testing\\COMP.SE.200-Part 2\\src\\.internal\\baseFindKey.js";var hash="2535d6bbdbaf261bdd493945cebccbcf125c28ee";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"D:\\Msc in DS-Course Materials\\Software Testing\\COMP.SE.200-Part 2\\src\\.internal\\baseFindKey.js",statementMap:{"0":{start:{line:13,column:2},end:{line:18,column:4}},"1":{start:{line:14,column:4},end:{line:17,column:5}},"2":{start:{line:15,column:6},end:{line:15,column:18}},"3":{start:{line:16,column:6},end:{line:16,column:18}},"4":{start:{line:19,column:2},end:{line:19,column:15}}},fnMap:{"0":{name:"baseFindKey",decl:{start:{line:11,column:9},end:{line:11,column:20}},loc:{start:{line:11,column:54},end:{line:20,column:1}},line:11},"1":{name:"(anonymous_1)",decl:{start:{line:13,column:23},end:{line:13,column:24}},loc:{start:{line:13,column:51},end:{line:18,column:3}},line:13}},branchMap:{"0":{loc:{start:{line:14,column:4},end:{line:17,column:5}},type:"if",locations:[{start:{line:14,column:4},end:{line:17,column:5}},{start:{line:14,column:4},end:{line:17,column:5}}],line:14}},s:{"0":0,"1":0,"2":0,"3":0,"4":0},f:{"0":0,"1":0},b:{"0":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"2535d6bbdbaf261bdd493945cebccbcf125c28ee"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_zrwk4944=function(){return actualCoverage;};}return actualCoverage;}cov_zrwk4944();/**
 * The base implementation of methods like `findKey` and `findLastKey`
 * which iterates over `collection` using `eachFunc`.
 *
 * @private
 * @param {Array|Object} collection The collection to inspect.
 * @param {Function} predicate The function invoked per iteration.
 * @param {Function} eachFunc The function to iterate over `collection`.
 * @returns {*} Returns the found element or its key, else `undefined`.
 */function baseFindKey(collection,predicate,eachFunc){cov_zrwk4944().f[0]++;let result;cov_zrwk4944().s[0]++;eachFunc(collection,(value,key,collection)=>{cov_zrwk4944().f[1]++;cov_zrwk4944().s[1]++;if(predicate(value,key,collection)){cov_zrwk4944().b[0][0]++;cov_zrwk4944().s[2]++;result=key;cov_zrwk4944().s[3]++;return false;}else{cov_zrwk4944().b[0][1]++;}});cov_zrwk4944().s[4]++;return result;}export default baseFindKey;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfenJ3azQ5NDQiLCJhY3R1YWxDb3ZlcmFnZSIsImJhc2VGaW5kS2V5IiwiY29sbGVjdGlvbiIsInByZWRpY2F0ZSIsImVhY2hGdW5jIiwiZiIsInJlc3VsdCIsInMiLCJ2YWx1ZSIsImtleSIsImIiXSwic291cmNlcyI6WyJiYXNlRmluZEtleS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgZmluZEtleWAgYW5kIGBmaW5kTGFzdEtleWBcbiAqIHdoaWNoIGl0ZXJhdGVzIG92ZXIgYGNvbGxlY3Rpb25gIHVzaW5nIGBlYWNoRnVuY2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGluc3BlY3QuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVhY2hGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgYGNvbGxlY3Rpb25gLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGZvdW5kIGVsZW1lbnQgb3IgaXRzIGtleSwgZWxzZSBgdW5kZWZpbmVkYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUZpbmRLZXkoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBlYWNoRnVuYykge1xuICBsZXQgcmVzdWx0XG4gIGVhY2hGdW5jKGNvbGxlY3Rpb24sICh2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSA9PiB7XG4gICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSkge1xuICAgICAgcmVzdWx0ID0ga2V5XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gIH0pXG4gIHJldHVybiByZXN1bHRcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUZpbmRLZXlcbiJdLCJtYXBwaW5ncyI6InM5Q0FlWTtBQUFBQSxZQUFBLFNBQUFBLENBQUEsU0FBQUMsY0FBQSxXQUFBQSxjQUFBLEVBQUFELFlBQUEsR0FmWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUNBLFFBQVMsQ0FBQUUsV0FBV0EsQ0FBQ0MsVUFBVSxDQUFFQyxTQUFTLENBQUVDLFFBQVEsQ0FBRSxDQUFBTCxZQUFBLEdBQUFNLENBQUEsTUFDcEQsR0FBSSxDQUFBQyxNQUFNLENBQUFQLFlBQUEsR0FBQVEsQ0FBQSxNQUNWSCxRQUFRLENBQUNGLFVBQVUsQ0FBRSxDQUFDTSxLQUFLLENBQUVDLEdBQUcsQ0FBRVAsVUFBVSxHQUFLLENBQUFILFlBQUEsR0FBQU0sQ0FBQSxNQUFBTixZQUFBLEdBQUFRLENBQUEsTUFDL0MsR0FBSUosU0FBUyxDQUFDSyxLQUFLLENBQUVDLEdBQUcsQ0FBRVAsVUFBVSxDQUFDLENBQUUsQ0FBQUgsWUFBQSxHQUFBVyxDQUFBLFNBQUFYLFlBQUEsR0FBQVEsQ0FBQSxNQUNyQ0QsTUFBTSxDQUFHRyxHQUFHLENBQUFWLFlBQUEsR0FBQVEsQ0FBQSxNQUNaLE1BQU8sTUFBSyxDQUNkLENBQUMsS0FBQVIsWUFBQSxHQUFBVyxDQUFBLFVBQ0gsQ0FBQyxDQUFDLENBQUFYLFlBQUEsR0FBQVEsQ0FBQSxNQUNGLE1BQU8sQ0FBQUQsTUFBTSxDQUNmLENBRUEsY0FBZSxDQUFBTCxXQUFXIiwiaWdub3JlTGlzdCI6W119