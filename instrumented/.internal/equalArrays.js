function cov_2ot5xa5lvh(){var path="D:\\Msc in DS-Course Materials\\Software Testing\\COMP.SE.200-Part 2\\src\\.internal\\equalArrays.js";var hash="6f4900579071b387d23bc9ce71aceb6bd426c22c";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"D:\\Msc in DS-Course Materials\\Software Testing\\COMP.SE.200-Part 2\\src\\.internal\\equalArrays.js",statementMap:{"0":{start:{line:6,column:29},end:{line:6,column:30}},"1":{start:{line:7,column:31},end:{line:7,column:32}},"2":{start:{line:23,column:20},end:{line:23,column:50}},"3":{start:{line:24,column:20},end:{line:24,column:32}},"4":{start:{line:25,column:20},end:{line:25,column:32}},"5":{start:{line:27,column:2},end:{line:29,column:3}},"6":{start:{line:28,column:4},end:{line:28,column:16}},"7":{start:{line:31,column:18},end:{line:31,column:34}},"8":{start:{line:32,column:2},end:{line:34,column:3}},"9":{start:{line:33,column:4},end:{line:33,column:27}},"10":{start:{line:35,column:14},end:{line:35,column:16}},"11":{start:{line:36,column:15},end:{line:36,column:19}},"12":{start:{line:37,column:15},end:{line:37,column:76}},"13":{start:{line:39,column:2},end:{line:39,column:25}},"14":{start:{line:40,column:2},end:{line:40,column:25}},"15":{start:{line:43,column:2},end:{line:78,column:3}},"16":{start:{line:45,column:21},end:{line:45,column:33}},"17":{start:{line:46,column:21},end:{line:46,column:33}},"18":{start:{line:48,column:4},end:{line:52,column:5}},"19":{start:{line:49,column:6},end:{line:51,column:68}},"20":{start:{line:53,column:4},end:{line:59,column:5}},"21":{start:{line:54,column:6},end:{line:56,column:7}},"22":{start:{line:55,column:8},end:{line:55,column:16}},"23":{start:{line:57,column:6},end:{line:57,column:20}},"24":{start:{line:58,column:6},end:{line:58,column:11}},"25":{start:{line:61,column:4},end:{line:77,column:5}},"26":{start:{line:62,column:6},end:{line:70,column:7}},"27":{start:{line:63,column:8},end:{line:66,column:9}},"28":{start:{line:65,column:10},end:{line:65,column:36}},"29":{start:{line:68,column:8},end:{line:68,column:22}},"30":{start:{line:69,column:8},end:{line:69,column:13}},"31":{start:{line:71,column:11},end:{line:77,column:5}},"32":{start:{line:75,column:6},end:{line:75,column:20}},"33":{start:{line:76,column:6},end:{line:76,column:11}},"34":{start:{line:79,column:2},end:{line:79,column:24}},"35":{start:{line:80,column:2},end:{line:80,column:24}},"36":{start:{line:81,column:2},end:{line:81,column:15}}},fnMap:{"0":{name:"equalArrays",decl:{start:{line:22,column:9},end:{line:22,column:20}},loc:{start:{line:22,column:74},end:{line:82,column:1}},line:22},"1":{name:"(anonymous_1)",decl:{start:{line:62,column:23},end:{line:62,column:24}},loc:{start:{line:62,column:47},end:{line:67,column:7}},line:62}},branchMap:{"0":{loc:{start:{line:27,column:2},end:{line:29,column:3}},type:"if",locations:[{start:{line:27,column:2},end:{line:29,column:3}},{start:{line:27,column:2},end:{line:29,column:3}}],line:27},"1":{loc:{start:{line:27,column:6},end:{line:27,column:69}},type:"binary-expr",locations:[{start:{line:27,column:6},end:{line:27,column:28}},{start:{line:27,column:32},end:{line:27,column:69}}],line:27},"2":{loc:{start:{line:27,column:34},end:{line:27,column:68}},type:"binary-expr",locations:[{start:{line:27,column:34},end:{line:27,column:43}},{start:{line:27,column:47},end:{line:27,column:68}}],line:27},"3":{loc:{start:{line:32,column:2},end:{line:34,column:3}},type:"if",locations:[{start:{line:32,column:2},end:{line:34,column:3}},{start:{line:32,column:2},end:{line:34,column:3}}],line:32},"4":{loc:{start:{line:32,column:6},end:{line:32,column:33}},type:"binary-expr",locations:[{start:{line:32,column:6},end:{line:32,column:13}},{start:{line:32,column:17},end:{line:32,column:33}}],line:32},"5":{loc:{start:{line:37,column:15},end:{line:37,column:76}},type:"cond-expr",locations:[{start:{line:37,column:52},end:{line:37,column:64}},{start:{line:37,column:67},end:{line:37,column:76}}],line:37},"6":{loc:{start:{line:48,column:4},end:{line:52,column:5}},type:"if",locations:[{start:{line:48,column:4},end:{line:52,column:5}},{start:{line:48,column:4},end:{line:52,column:5}}],line:48},"7":{loc:{start:{line:49,column:17},end:{line:51,column:68}},type:"cond-expr",locations:[{start:{line:50,column:10},end:{line:50,column:68}},{start:{line:51,column:10},end:{line:51,column:68}}],line:49},"8":{loc:{start:{line:53,column:4},end:{line:59,column:5}},type:"if",locations:[{start:{line:53,column:4},end:{line:59,column:5}},{start:{line:53,column:4},end:{line:59,column:5}}],line:53},"9":{loc:{start:{line:54,column:6},end:{line:56,column:7}},type:"if",locations:[{start:{line:54,column:6},end:{line:56,column:7}},{start:{line:54,column:6},end:{line:56,column:7}}],line:54},"10":{loc:{start:{line:61,column:4},end:{line:77,column:5}},type:"if",locations:[{start:{line:61,column:4},end:{line:77,column:5}},{start:{line:61,column:4},end:{line:77,column:5}}],line:61},"11":{loc:{start:{line:62,column:6},end:{line:70,column:7}},type:"if",locations:[{start:{line:62,column:6},end:{line:70,column:7}},{start:{line:62,column:6},end:{line:70,column:7}}],line:62},"12":{loc:{start:{line:63,column:8},end:{line:66,column:9}},type:"if",locations:[{start:{line:63,column:8},end:{line:66,column:9}},{start:{line:63,column:8},end:{line:66,column:9}}],line:63},"13":{loc:{start:{line:63,column:12},end:{line:64,column:94}},type:"binary-expr",locations:[{start:{line:63,column:12},end:{line:63,column:37}},{start:{line:64,column:11},end:{line:64,column:32}},{start:{line:64,column:36},end:{line:64,column:93}}],line:63},"14":{loc:{start:{line:71,column:11},end:{line:77,column:5}},type:"if",locations:[{start:{line:71,column:11},end:{line:77,column:5}},{start:{line:71,column:11},end:{line:77,column:5}}],line:71},"15":{loc:{start:{line:72,column:6},end:{line:73,column:69}},type:"binary-expr",locations:[{start:{line:72,column:6},end:{line:72,column:27}},{start:{line:73,column:12},end:{line:73,column:69}}],line:72}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0},f:{"0":0,"1":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0,0],"14":[0,0],"15":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"6f4900579071b387d23bc9ce71aceb6bd426c22c"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2ot5xa5lvh=function(){return actualCoverage;};}return actualCoverage;}cov_2ot5xa5lvh();import SetCache from'./SetCache.js';import some from'../some.js';import cacheHas from'./cacheHas.js';/** Used to compose bitmasks for value comparisons. */const COMPARE_PARTIAL_FLAG=(cov_2ot5xa5lvh().s[0]++,1);const COMPARE_UNORDERED_FLAG=(cov_2ot5xa5lvh().s[1]++,2);/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */function equalArrays(array,other,bitmask,customizer,equalFunc,stack){cov_2ot5xa5lvh().f[0]++;const isPartial=(cov_2ot5xa5lvh().s[2]++,bitmask&COMPARE_PARTIAL_FLAG);const arrLength=(cov_2ot5xa5lvh().s[3]++,array.length);const othLength=(cov_2ot5xa5lvh().s[4]++,other.length);cov_2ot5xa5lvh().s[5]++;if((cov_2ot5xa5lvh().b[1][0]++,arrLength!=othLength)&&(cov_2ot5xa5lvh().b[1][1]++,!((cov_2ot5xa5lvh().b[2][0]++,isPartial)&&(cov_2ot5xa5lvh().b[2][1]++,othLength>arrLength)))){cov_2ot5xa5lvh().b[0][0]++;cov_2ot5xa5lvh().s[6]++;return false;}else{cov_2ot5xa5lvh().b[0][1]++;}// Assume cyclic values are equal.
const stacked=(cov_2ot5xa5lvh().s[7]++,stack.get(array));cov_2ot5xa5lvh().s[8]++;if((cov_2ot5xa5lvh().b[4][0]++,stacked)&&(cov_2ot5xa5lvh().b[4][1]++,stack.get(other))){cov_2ot5xa5lvh().b[3][0]++;cov_2ot5xa5lvh().s[9]++;return stacked==other;}else{cov_2ot5xa5lvh().b[3][1]++;}let index=(cov_2ot5xa5lvh().s[10]++,-1);let result=(cov_2ot5xa5lvh().s[11]++,true);const seen=(cov_2ot5xa5lvh().s[12]++,bitmask&COMPARE_UNORDERED_FLAG?(cov_2ot5xa5lvh().b[5][0]++,new SetCache()):(cov_2ot5xa5lvh().b[5][1]++,undefined));cov_2ot5xa5lvh().s[13]++;stack.set(array,other);cov_2ot5xa5lvh().s[14]++;stack.set(other,array);// Ignore non-index properties.
cov_2ot5xa5lvh().s[15]++;while(++index<arrLength){let compared;const arrValue=(cov_2ot5xa5lvh().s[16]++,array[index]);const othValue=(cov_2ot5xa5lvh().s[17]++,other[index]);cov_2ot5xa5lvh().s[18]++;if(customizer){cov_2ot5xa5lvh().b[6][0]++;cov_2ot5xa5lvh().s[19]++;compared=isPartial?(cov_2ot5xa5lvh().b[7][0]++,customizer(othValue,arrValue,index,other,array,stack)):(cov_2ot5xa5lvh().b[7][1]++,customizer(arrValue,othValue,index,array,other,stack));}else{cov_2ot5xa5lvh().b[6][1]++;}cov_2ot5xa5lvh().s[20]++;if(compared!==undefined){cov_2ot5xa5lvh().b[8][0]++;cov_2ot5xa5lvh().s[21]++;if(compared){cov_2ot5xa5lvh().b[9][0]++;cov_2ot5xa5lvh().s[22]++;continue;}else{cov_2ot5xa5lvh().b[9][1]++;}cov_2ot5xa5lvh().s[23]++;result=false;cov_2ot5xa5lvh().s[24]++;break;}else{cov_2ot5xa5lvh().b[8][1]++;}// Recursively compare arrays (susceptible to call stack limits).
cov_2ot5xa5lvh().s[25]++;if(seen){cov_2ot5xa5lvh().b[10][0]++;cov_2ot5xa5lvh().s[26]++;if(!some(other,(othValue,othIndex)=>{cov_2ot5xa5lvh().f[1]++;cov_2ot5xa5lvh().s[27]++;if((cov_2ot5xa5lvh().b[13][0]++,!cacheHas(seen,othIndex))&&((cov_2ot5xa5lvh().b[13][1]++,arrValue===othValue)||(cov_2ot5xa5lvh().b[13][2]++,equalFunc(arrValue,othValue,bitmask,customizer,stack)))){cov_2ot5xa5lvh().b[12][0]++;cov_2ot5xa5lvh().s[28]++;return seen.push(othIndex);}else{cov_2ot5xa5lvh().b[12][1]++;}})){cov_2ot5xa5lvh().b[11][0]++;cov_2ot5xa5lvh().s[29]++;result=false;cov_2ot5xa5lvh().s[30]++;break;}else{cov_2ot5xa5lvh().b[11][1]++;}}else{cov_2ot5xa5lvh().b[10][1]++;cov_2ot5xa5lvh().s[31]++;if(!((cov_2ot5xa5lvh().b[15][0]++,arrValue===othValue)||(cov_2ot5xa5lvh().b[15][1]++,equalFunc(arrValue,othValue,bitmask,customizer,stack)))){cov_2ot5xa5lvh().b[14][0]++;cov_2ot5xa5lvh().s[32]++;result=false;cov_2ot5xa5lvh().s[33]++;break;}else{cov_2ot5xa5lvh().b[14][1]++;}}}cov_2ot5xa5lvh().s[34]++;stack['delete'](array);cov_2ot5xa5lvh().s[35]++;stack['delete'](other);cov_2ot5xa5lvh().s[36]++;return result;}export default equalArrays;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,