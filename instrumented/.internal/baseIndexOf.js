function cov_sc5h3r5ha(){var path="D:\\Msc in DS-Course Materials\\Software Testing\\COMP.SE.200-Part 2\\src\\.internal\\baseIndexOf.js";var hash="b79a7d3cdc72ecce36c884d08272a5aa5d47d04f";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"D:\\Msc in DS-Course Materials\\Software Testing\\COMP.SE.200-Part 2\\src\\.internal\\baseIndexOf.js",statementMap:{"0":{start:{line:15,column:2},end:{line:17,column:48}}},fnMap:{"0":{name:"baseIndexOf",decl:{start:{line:14,column:9},end:{line:14,column:20}},loc:{start:{line:14,column:46},end:{line:18,column:1}},line:14}},branchMap:{"0":{loc:{start:{line:15,column:9},end:{line:17,column:48}},type:"cond-expr",locations:[{start:{line:16,column:6},end:{line:16,column:44}},{start:{line:17,column:6},end:{line:17,column:48}}],line:15}},s:{"0":0},f:{"0":0},b:{"0":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"b79a7d3cdc72ecce36c884d08272a5aa5d47d04f"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_sc5h3r5ha=function(){return actualCoverage;};}return actualCoverage;}cov_sc5h3r5ha();import baseFindIndex from'./baseFindIndex.js';import baseIsNaN from'./baseIsNaN.js';import strictIndexOf from'./strictIndexOf.js';/**
 * The base implementation of `indexOf` without `fromIndex` bounds checks.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */function baseIndexOf(array,value,fromIndex){cov_sc5h3r5ha().f[0]++;cov_sc5h3r5ha().s[0]++;return value===value?(cov_sc5h3r5ha().b[0][0]++,strictIndexOf(array,value,fromIndex)):(cov_sc5h3r5ha().b[0][1]++,baseFindIndex(array,baseIsNaN,fromIndex));}export default baseIndexOf;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3Zfc2M1aDNyNWhhIiwiYWN0dWFsQ292ZXJhZ2UiLCJiYXNlRmluZEluZGV4IiwiYmFzZUlzTmFOIiwic3RyaWN0SW5kZXhPZiIsImJhc2VJbmRleE9mIiwiYXJyYXkiLCJ2YWx1ZSIsImZyb21JbmRleCIsImYiLCJzIiwiYiJdLCJzb3VyY2VzIjpbImJhc2VJbmRleE9mLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBiYXNlRmluZEluZGV4IGZyb20gJy4vYmFzZUZpbmRJbmRleC5qcydcbmltcG9ydCBiYXNlSXNOYU4gZnJvbSAnLi9iYXNlSXNOYU4uanMnXG5pbXBvcnQgc3RyaWN0SW5kZXhPZiBmcm9tICcuL3N0cmljdEluZGV4T2YuanMnXG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGluZGV4T2ZgIHdpdGhvdXQgYGZyb21JbmRleGAgYm91bmRzIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICovXG5mdW5jdGlvbiBiYXNlSW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICByZXR1cm4gdmFsdWUgPT09IHZhbHVlXG4gICAgPyBzdHJpY3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KVxuICAgIDogYmFzZUZpbmRJbmRleChhcnJheSwgYmFzZUlzTmFOLCBmcm9tSW5kZXgpXG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VJbmRleE9mXG4iXSwibWFwcGluZ3MiOiJzbENBZVk7QUFBQUEsYUFBQSxTQUFBQSxDQUFBLFNBQUFDLGNBQUEsV0FBQUEsY0FBQSxFQUFBRCxhQUFBLEdBZlosTUFBTyxDQUFBRSxhQUFhLEtBQU0sb0JBQW9CLENBQzlDLE1BQU8sQ0FBQUMsU0FBUyxLQUFNLGdCQUFnQixDQUN0QyxNQUFPLENBQUFDLGFBQWEsS0FBTSxvQkFBb0IsQ0FFOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQ0EsUUFBUyxDQUFBQyxXQUFXQSxDQUFDQyxLQUFLLENBQUVDLEtBQUssQ0FBRUMsU0FBUyxDQUFFLENBQUFSLGFBQUEsR0FBQVMsQ0FBQSxNQUFBVCxhQUFBLEdBQUFVLENBQUEsTUFDNUMsTUFBTyxDQUFBSCxLQUFLLEdBQUtBLEtBQUssRUFBQVAsYUFBQSxHQUFBVyxDQUFBLFNBQ2xCUCxhQUFhLENBQUNFLEtBQUssQ0FBRUMsS0FBSyxDQUFFQyxTQUFTLENBQUMsR0FBQVIsYUFBQSxHQUFBVyxDQUFBLFNBQ3RDVCxhQUFhLENBQUNJLEtBQUssQ0FBRUgsU0FBUyxDQUFFSyxTQUFTLENBQUMsRUFDaEQsQ0FFQSxjQUFlLENBQUFILFdBQVciLCJpZ25vcmVMaXN0IjpbXX0=