function cov_wdcgd1rpe(){var path="D:\\Msc in DS-Course Materials\\Software Testing\\COMP.SE.200-Part 2\\src\\.internal\\mapToArray.js";var hash="b508887c924154d923fbaea13e950656a726b6ea";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"D:\\Msc in DS-Course Materials\\Software Testing\\COMP.SE.200-Part 2\\src\\.internal\\mapToArray.js",statementMap:{"0":{start:{line:9,column:14},end:{line:9,column:16}},"1":{start:{line:10,column:17},end:{line:10,column:36}},"2":{start:{line:12,column:2},end:{line:14,column:4}},"3":{start:{line:13,column:4},end:{line:13,column:34}},"4":{start:{line:15,column:2},end:{line:15,column:15}}},fnMap:{"0":{name:"mapToArray",decl:{start:{line:8,column:9},end:{line:8,column:19}},loc:{start:{line:8,column:25},end:{line:16,column:1}},line:8},"1":{name:"(anonymous_1)",decl:{start:{line:12,column:14},end:{line:12,column:15}},loc:{start:{line:12,column:30},end:{line:14,column:3}},line:12}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0},f:{"0":0,"1":0},b:{},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"b508887c924154d923fbaea13e950656a726b6ea"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_wdcgd1rpe=function(){return actualCoverage;};}return actualCoverage;}cov_wdcgd1rpe();/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */function mapToArray(map){cov_wdcgd1rpe().f[0]++;let index=(cov_wdcgd1rpe().s[0]++,-1);const result=(cov_wdcgd1rpe().s[1]++,new Array(map.size));cov_wdcgd1rpe().s[2]++;map.forEach((value,key)=>{cov_wdcgd1rpe().f[1]++;cov_wdcgd1rpe().s[3]++;result[++index]=[key,value];});cov_wdcgd1rpe().s[4]++;return result;}export default mapToArray;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3Zfd2RjZ2QxcnBlIiwiYWN0dWFsQ292ZXJhZ2UiLCJtYXBUb0FycmF5IiwibWFwIiwiZiIsImluZGV4IiwicyIsInJlc3VsdCIsIkFycmF5Iiwic2l6ZSIsImZvckVhY2giLCJ2YWx1ZSIsImtleSJdLCJzb3VyY2VzIjpbIm1hcFRvQXJyYXkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb252ZXJ0cyBgbWFwYCB0byBpdHMga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUga2V5LXZhbHVlIHBhaXJzLlxuICovXG5mdW5jdGlvbiBtYXBUb0FycmF5KG1hcCkge1xuICBsZXQgaW5kZXggPSAtMVxuICBjb25zdCByZXN1bHQgPSBuZXcgQXJyYXkobWFwLnNpemUpXG5cbiAgbWFwLmZvckVhY2goKHZhbHVlLCBrZXkpID0+IHtcbiAgICByZXN1bHRbKytpbmRleF0gPSBba2V5LCB2YWx1ZV1cbiAgfSlcbiAgcmV0dXJuIHJlc3VsdFxufVxuXG5leHBvcnQgZGVmYXVsdCBtYXBUb0FycmF5XG4iXSwibWFwcGluZ3MiOiIyd0NBZVk7QUFBQUEsYUFBQSxTQUFBQSxDQUFBLFNBQUFDLGNBQUEsV0FBQUEsY0FBQSxFQUFBRCxhQUFBLEdBZlo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FDQSxRQUFTLENBQUFFLFVBQVVBLENBQUNDLEdBQUcsQ0FBRSxDQUFBSCxhQUFBLEdBQUFJLENBQUEsTUFDdkIsR0FBSSxDQUFBQyxLQUFLLEVBQUFMLGFBQUEsR0FBQU0sQ0FBQSxNQUFHLENBQUMsQ0FBQyxFQUNkLEtBQU0sQ0FBQUMsTUFBTSxFQUFBUCxhQUFBLEdBQUFNLENBQUEsTUFBRyxHQUFJLENBQUFFLEtBQUssQ0FBQ0wsR0FBRyxDQUFDTSxJQUFJLENBQUMsRUFBQVQsYUFBQSxHQUFBTSxDQUFBLE1BRWxDSCxHQUFHLENBQUNPLE9BQU8sQ0FBQyxDQUFDQyxLQUFLLENBQUVDLEdBQUcsR0FBSyxDQUFBWixhQUFBLEdBQUFJLENBQUEsTUFBQUosYUFBQSxHQUFBTSxDQUFBLE1BQzFCQyxNQUFNLENBQUMsRUFBRUYsS0FBSyxDQUFDLENBQUcsQ0FBQ08sR0FBRyxDQUFFRCxLQUFLLENBQUMsQ0FDaEMsQ0FBQyxDQUFDLENBQUFYLGFBQUEsR0FBQU0sQ0FBQSxNQUNGLE1BQU8sQ0FBQUMsTUFBTSxDQUNmLENBRUEsY0FBZSxDQUFBTCxVQUFVIiwiaWdub3JlTGlzdCI6W119