function cov_23biyhqv2f(){var path="D:\\Msc in DS-Course Materials\\Software Testing\\COMP.SE.200-Part 2\\src\\.internal\\cloneRegExp.js";var hash="53a225d9cf0efbfa9bb30644c89435341cecdfa2";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"D:\\Msc in DS-Course Materials\\Software Testing\\COMP.SE.200-Part 2\\src\\.internal\\cloneRegExp.js",statementMap:{"0":{start:{line:2,column:16},end:{line:2,column:22}},"1":{start:{line:12,column:17},end:{line:12,column:76}},"2":{start:{line:13,column:2},end:{line:13,column:37}},"3":{start:{line:14,column:2},end:{line:14,column:15}}},fnMap:{"0":{name:"cloneRegExp",decl:{start:{line:11,column:9},end:{line:11,column:20}},loc:{start:{line:11,column:29},end:{line:15,column:1}},line:11}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0},f:{"0":0},b:{},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"53a225d9cf0efbfa9bb30644c89435341cecdfa2"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_23biyhqv2f=function(){return actualCoverage;};}return actualCoverage;}cov_23biyhqv2f();/** Used to match `RegExp` flags from their coerced string values. */const reFlags=(cov_23biyhqv2f().s[0]++,/\w*$/);/**
 * Creates a clone of `regexp`.
 *
 * @private
 * @param {Object} regexp The regexp to clone.
 * @returns {Object} Returns the cloned regexp.
 */function cloneRegExp(regexp){cov_23biyhqv2f().f[0]++;const result=(cov_23biyhqv2f().s[1]++,new regexp.constructor(regexp.source,reFlags.exec(regexp)));cov_23biyhqv2f().s[2]++;result.lastIndex=regexp.lastIndex;cov_23biyhqv2f().s[3]++;return result;}export default cloneRegExp;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMjNiaXlocXYyZiIsImFjdHVhbENvdmVyYWdlIiwicmVGbGFncyIsInMiLCJjbG9uZVJlZ0V4cCIsInJlZ2V4cCIsImYiLCJyZXN1bHQiLCJjb25zdHJ1Y3RvciIsInNvdXJjZSIsImV4ZWMiLCJsYXN0SW5kZXgiXSwic291cmNlcyI6WyJjbG9uZVJlZ0V4cC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiogVXNlZCB0byBtYXRjaCBgUmVnRXhwYCBmbGFncyBmcm9tIHRoZWlyIGNvZXJjZWQgc3RyaW5nIHZhbHVlcy4gKi9cbmNvbnN0IHJlRmxhZ3MgPSAvXFx3KiQvXG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mIGByZWdleHBgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gcmVnZXhwIFRoZSByZWdleHAgdG8gY2xvbmUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgcmVnZXhwLlxuICovXG5mdW5jdGlvbiBjbG9uZVJlZ0V4cChyZWdleHApIHtcbiAgY29uc3QgcmVzdWx0ID0gbmV3IHJlZ2V4cC5jb25zdHJ1Y3RvcihyZWdleHAuc291cmNlLCByZUZsYWdzLmV4ZWMocmVnZXhwKSlcbiAgcmVzdWx0Lmxhc3RJbmRleCA9IHJlZ2V4cC5sYXN0SW5kZXhcbiAgcmV0dXJuIHJlc3VsdFxufVxuXG5leHBvcnQgZGVmYXVsdCBjbG9uZVJlZ0V4cFxuIl0sIm1hcHBpbmdzIjoiOGpDQWVZO0FBQUFBLGNBQUEsU0FBQUEsQ0FBQSxTQUFBQyxjQUFBLFdBQUFBLGNBQUEsRUFBQUQsY0FBQSxHQWZaLHFFQUNBLEtBQU0sQ0FBQUUsT0FBTyxFQUFBRixjQUFBLEdBQUFHLENBQUEsTUFBRyxNQUFNLEVBRXRCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQ0EsUUFBUyxDQUFBQyxXQUFXQSxDQUFDQyxNQUFNLENBQUUsQ0FBQUwsY0FBQSxHQUFBTSxDQUFBLE1BQzNCLEtBQU0sQ0FBQUMsTUFBTSxFQUFBUCxjQUFBLEdBQUFHLENBQUEsTUFBRyxHQUFJLENBQUFFLE1BQU0sQ0FBQ0csV0FBVyxDQUFDSCxNQUFNLENBQUNJLE1BQU0sQ0FBRVAsT0FBTyxDQUFDUSxJQUFJLENBQUNMLE1BQU0sQ0FBQyxDQUFDLEVBQUFMLGNBQUEsR0FBQUcsQ0FBQSxNQUMxRUksTUFBTSxDQUFDSSxTQUFTLENBQUdOLE1BQU0sQ0FBQ00sU0FBUyxDQUFBWCxjQUFBLEdBQUFHLENBQUEsTUFDbkMsTUFBTyxDQUFBSSxNQUFNLENBQ2YsQ0FFQSxjQUFlLENBQUFILFdBQVciLCJpZ25vcmVMaXN0IjpbXX0=