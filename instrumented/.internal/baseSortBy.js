function cov_rt5bz3u2i(){var path="D:\\Msc in DS-Course Materials\\Software Testing\\COMP.SE.200-Part 2\\src\\.internal\\baseSortBy.js";var hash="55c9d9679b3bd4da6b77d182103666e1112a884b";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"D:\\Msc in DS-Course Materials\\Software Testing\\COMP.SE.200-Part 2\\src\\.internal\\baseSortBy.js",statementMap:{"0":{start:{line:12,column:19},end:{line:12,column:24}},"1":{start:{line:14,column:2},end:{line:14,column:22}},"2":{start:{line:15,column:2},end:{line:17,column:3}},"3":{start:{line:16,column:4},end:{line:16,column:39}},"4":{start:{line:18,column:2},end:{line:18,column:14}}},fnMap:{"0":{name:"baseSortBy",decl:{start:{line:11,column:9},end:{line:11,column:19}},loc:{start:{line:11,column:37},end:{line:19,column:1}},line:11}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0},f:{"0":0},b:{},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"55c9d9679b3bd4da6b77d182103666e1112a884b"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_rt5bz3u2i=function(){return actualCoverage;};}return actualCoverage;}cov_rt5bz3u2i();/**
 * The base implementation of `sortBy` which uses `comparer` to define the
 * sort order of `array` and replaces criteria objects with their corresponding
 * values.
 *
 * @private
 * @param {Array} array The array to sort.
 * @param {Function} comparer The function to define sort order.
 * @returns {Array} Returns `array`.
 */function baseSortBy(array,comparer){cov_rt5bz3u2i().f[0]++;let{length}=(cov_rt5bz3u2i().s[0]++,array);cov_rt5bz3u2i().s[1]++;array.sort(comparer);cov_rt5bz3u2i().s[2]++;while(length--){cov_rt5bz3u2i().s[3]++;array[length]=array[length].value;}cov_rt5bz3u2i().s[4]++;return array;}export default baseSortBy;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfcnQ1YnozdTJpIiwiYWN0dWFsQ292ZXJhZ2UiLCJiYXNlU29ydEJ5IiwiYXJyYXkiLCJjb21wYXJlciIsImYiLCJsZW5ndGgiLCJzIiwic29ydCIsInZhbHVlIl0sInNvdXJjZXMiOlsiYmFzZVNvcnRCeS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBzb3J0QnlgIHdoaWNoIHVzZXMgYGNvbXBhcmVyYCB0byBkZWZpbmUgdGhlXG4gKiBzb3J0IG9yZGVyIG9mIGBhcnJheWAgYW5kIHJlcGxhY2VzIGNyaXRlcmlhIG9iamVjdHMgd2l0aCB0aGVpciBjb3JyZXNwb25kaW5nXG4gKiB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzb3J0LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY29tcGFyZXIgVGhlIGZ1bmN0aW9uIHRvIGRlZmluZSBzb3J0IG9yZGVyLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VTb3J0QnkoYXJyYXksIGNvbXBhcmVyKSB7XG4gIGxldCB7IGxlbmd0aCB9ID0gYXJyYXlcblxuICBhcnJheS5zb3J0KGNvbXBhcmVyKVxuICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICBhcnJheVtsZW5ndGhdID0gYXJyYXlbbGVuZ3RoXS52YWx1ZVxuICB9XG4gIHJldHVybiBhcnJheVxufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlU29ydEJ5XG4iXSwibWFwcGluZ3MiOiJ1bkNBZVk7QUFBQUEsYUFBQSxTQUFBQSxDQUFBLFNBQUFDLGNBQUEsV0FBQUEsY0FBQSxFQUFBRCxhQUFBLEdBZlo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FDQSxRQUFTLENBQUFFLFVBQVVBLENBQUNDLEtBQUssQ0FBRUMsUUFBUSxDQUFFLENBQUFKLGFBQUEsR0FBQUssQ0FBQSxNQUNuQyxHQUFJLENBQUVDLE1BQU8sQ0FBQyxFQUFBTixhQUFBLEdBQUFPLENBQUEsTUFBR0osS0FBSyxFQUFBSCxhQUFBLEdBQUFPLENBQUEsTUFFdEJKLEtBQUssQ0FBQ0ssSUFBSSxDQUFDSixRQUFRLENBQUMsQ0FBQUosYUFBQSxHQUFBTyxDQUFBLE1BQ3BCLE1BQU9ELE1BQU0sRUFBRSxDQUFFLENBQUFOLGFBQUEsR0FBQU8sQ0FBQSxNQUNmSixLQUFLLENBQUNHLE1BQU0sQ0FBQyxDQUFHSCxLQUFLLENBQUNHLE1BQU0sQ0FBQyxDQUFDRyxLQUFLLENBQ3JDLENBQUNULGFBQUEsR0FBQU8sQ0FBQSxNQUNELE1BQU8sQ0FBQUosS0FBSyxDQUNkLENBRUEsY0FBZSxDQUFBRCxVQUFVIiwiaWdub3JlTGlzdCI6W119