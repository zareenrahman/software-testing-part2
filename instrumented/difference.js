function cov_26t7n5yero(){var path="D:\\Msc in DS-Course Materials\\Software Testing\\COMP.SE.200-Part 2\\src\\difference.js";var hash="7ea37d1ebdfcc4ba00453a66459baf0ef504916e";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"D:\\Msc in DS-Course Materials\\Software Testing\\COMP.SE.200-Part 2\\src\\difference.js",statementMap:{"0":{start:{line:25,column:2},end:{line:27,column:8}}},fnMap:{"0":{name:"difference",decl:{start:{line:24,column:9},end:{line:24,column:19}},loc:{start:{line:24,column:38},end:{line:28,column:1}},line:24}},branchMap:{"0":{loc:{start:{line:25,column:9},end:{line:27,column:8}},type:"cond-expr",locations:[{start:{line:26,column:6},end:{line:26,column:76}},{start:{line:27,column:6},end:{line:27,column:8}}],line:25}},s:{"0":0},f:{"0":0},b:{"0":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"7ea37d1ebdfcc4ba00453a66459baf0ef504916e"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_26t7n5yero=function(){return actualCoverage;};}return actualCoverage;}cov_26t7n5yero();import baseDifference from'./.internal/baseDifference.js';import baseFlatten from'./.internal/baseFlatten.js';import isArrayLikeObject from'./isArrayLikeObject.js';/**
 * Creates an array of `array` values not included in the other given arrays
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons. The order and references of result values are
 * determined by the first array.
 *
 * **Note:** Unlike `pullAll`, this method returns a new array.
 *
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {...Array} [values] The values to exclude.
 * @returns {Array} Returns the new array of filtered values.
 * @see union, unionBy, unionWith, without, xor, xorBy, xorWith,
 * @example
 *
 * difference([2, 1], [2, 3])
 * // => [1]
 */function difference(array,...values){cov_26t7n5yero().f[0]++;cov_26t7n5yero().s[0]++;return isArrayLikeObject(array)?(cov_26t7n5yero().b[0][0]++,baseDifference(array,baseFlatten(values,1,isArrayLikeObject,true))):(cov_26t7n5yero().b[0][1]++,[]);}export default difference;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMjZ0N241eWVybyIsImFjdHVhbENvdmVyYWdlIiwiYmFzZURpZmZlcmVuY2UiLCJiYXNlRmxhdHRlbiIsImlzQXJyYXlMaWtlT2JqZWN0IiwiZGlmZmVyZW5jZSIsImFycmF5IiwidmFsdWVzIiwiZiIsInMiLCJiIl0sInNvdXJjZXMiOlsiZGlmZmVyZW5jZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYmFzZURpZmZlcmVuY2UgZnJvbSAnLi8uaW50ZXJuYWwvYmFzZURpZmZlcmVuY2UuanMnXG5pbXBvcnQgYmFzZUZsYXR0ZW4gZnJvbSAnLi8uaW50ZXJuYWwvYmFzZUZsYXR0ZW4uanMnXG5pbXBvcnQgaXNBcnJheUxpa2VPYmplY3QgZnJvbSAnLi9pc0FycmF5TGlrZU9iamVjdC5qcydcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIGBhcnJheWAgdmFsdWVzIG5vdCBpbmNsdWRlZCBpbiB0aGUgb3RoZXIgZ2l2ZW4gYXJyYXlzXG4gKiB1c2luZyBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLiBUaGUgb3JkZXIgYW5kIHJlZmVyZW5jZXMgb2YgcmVzdWx0IHZhbHVlcyBhcmVcbiAqIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LlxuICpcbiAqICoqTm90ZToqKiBVbmxpa2UgYHB1bGxBbGxgLCB0aGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGFycmF5LlxuICpcbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IEFycmF5XG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7Li4uQXJyYXl9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gZXhjbHVkZS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAqIEBzZWUgdW5pb24sIHVuaW9uQnksIHVuaW9uV2l0aCwgd2l0aG91dCwgeG9yLCB4b3JCeSwgeG9yV2l0aCxcbiAqIEBleGFtcGxlXG4gKlxuICogZGlmZmVyZW5jZShbMiwgMV0sIFsyLCAzXSlcbiAqIC8vID0+IFsxXVxuICovXG5mdW5jdGlvbiBkaWZmZXJlbmNlKGFycmF5LCAuLi52YWx1ZXMpIHtcbiAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KGFycmF5KVxuICAgID8gYmFzZURpZmZlcmVuY2UoYXJyYXksIGJhc2VGbGF0dGVuKHZhbHVlcywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpKVxuICAgIDogW11cbn1cblxuZXhwb3J0IGRlZmF1bHQgZGlmZmVyZW5jZVxuIl0sIm1hcHBpbmdzIjoiMmpDQWVZO0FBQUFBLGNBQUEsU0FBQUEsQ0FBQSxTQUFBQyxjQUFBLFdBQUFBLGNBQUEsRUFBQUQsY0FBQSxHQWZaLE1BQU8sQ0FBQUUsY0FBYyxLQUFNLCtCQUErQixDQUMxRCxNQUFPLENBQUFDLFdBQVcsS0FBTSw0QkFBNEIsQ0FDcEQsTUFBTyxDQUFBQyxpQkFBaUIsS0FBTSx3QkFBd0IsQ0FFdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FDQSxRQUFTLENBQUFDLFVBQVVBLENBQUNDLEtBQUssQ0FBRSxHQUFHQyxNQUFNLENBQUUsQ0FBQVAsY0FBQSxHQUFBUSxDQUFBLE1BQUFSLGNBQUEsR0FBQVMsQ0FBQSxNQUNwQyxNQUFPLENBQUFMLGlCQUFpQixDQUFDRSxLQUFLLENBQUMsRUFBQU4sY0FBQSxHQUFBVSxDQUFBLFNBQzNCUixjQUFjLENBQUNJLEtBQUssQ0FBRUgsV0FBVyxDQUFDSSxNQUFNLENBQUUsQ0FBQyxDQUFFSCxpQkFBaUIsQ0FBRSxJQUFJLENBQUMsQ0FBQyxHQUFBSixjQUFBLEdBQUFVLENBQUEsU0FDdEUsRUFBRSxFQUNSLENBRUEsY0FBZSxDQUFBTCxVQUFVIiwiaWdub3JlTGlzdCI6W119